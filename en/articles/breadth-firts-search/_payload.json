[{"data":1,"prerenderedAt":886},["ShallowReactive",2],{"/en/articles/breadth-firts-search":3},{"id":4,"title":5,"body":6,"date":861,"description":862,"extension":863,"head":864,"image":872,"meta":873,"navigation":37,"ogImage":874,"path":876,"readingTime":861,"robots":861,"schemaOrg":877,"seo":878,"sitemap":879,"stem":883,"tags":884,"__hash__":885},"articles_en/en/articles/breadth-firts-search.md","Mengenal Algoritma Breadth-First Search (BFS)",{"type":7,"value":8,"toc":854},"minimal",[9,14,246,258,262,766,771,776,796,800,818,835,839,845,850],[10,11,13],"h1",{"id":12},"breadth-firts-search","BREADTH FIRTS SEARCH",[15,16,21],"pre",{"className":17,"code":18,"language":19,"meta":20,"style":20},"language-markdown shiki shiki-themes github-dark github-dark github-light","# Apa itu Algoritma Breadth-First Search (BFS)?\n\n**Breadth-First Search (BFS)** adalah algoritma pencarian dan penelusuran pada struktur data **grafik** atau **pohon**. BFS menjelajahi simpul (node) grafik dengan memulai dari node awal, lalu mengunjungi semua tetangga terdekat terlebih dahulu sebelum bergerak ke level berikutnya.\n\n> 🔍 BFS menelusuri secara **melebar**, bukan menyelam seperti DFS.\n\n---\n\n## Aplikasi BFS\n\nBFS banyak digunakan dalam berbagai masalah komputer, antara lain:\n\n- 🔁 **Menemukan jalur terpendek** dalam graf tak berbobot.\n- 🔍 **Pencarian elemen** dalam pohon atau graf.\n- 🌐 **Analisis jaringan**: Menentukan jarak antar simpul.\n- 🔧 **Pemecahan puzzle** seperti Rubik, Sudoku, atau pencarian labirin.\n- 📶 **Broadcasting**: Menyebarkan informasi dari satu node ke semua node.\n\n---\n\n## Cara Kerja BFS\n\n### Struktur Pendukung:\n- **Queue (antrian)**: Untuk mengatur urutan simpul yang akan dieksplorasi.\n- **Visited[]**: Untuk menandai simpul yang sudah dikunjungi agar tidak dikunjungi dua kali.\n\n### Langkah-langkah BFS:\n\n1. Masukkan `start node` ke queue dan tandai sebagai dikunjungi.\n2. Selama queue tidak kosong:\n   - Ambil node dari depan queue (dequeue).\n   - Proses node (misalnya cetak atau simpan hasil).\n   - Tambahkan semua tetangga **yang belum dikunjungi** ke queue dan tandai sebagai dikunjungi.\n\n---\n\n## Contoh Kasus\n\nGrafik:\n","markdown","",[22,23,24,32,39,45,50,56,61,67,72,78,83,89,94,100,106,112,118,124,129,134,139,145,150,156,162,168,173,179,184,190,196,202,208,214,219,224,229,235,240],"code",{"__ignoreMap":20},[25,26,29],"span",{"class":27,"line":28},"line",1,[25,30,31],{},"# Apa itu Algoritma Breadth-First Search (BFS)?\n",[25,33,35],{"class":27,"line":34},2,[25,36,38],{"emptyLinePlaceholder":37},true,"\n",[25,40,42],{"class":27,"line":41},3,[25,43,44],{},"**Breadth-First Search (BFS)** adalah algoritma pencarian dan penelusuran pada struktur data **grafik** atau **pohon**. BFS menjelajahi simpul (node) grafik dengan memulai dari node awal, lalu mengunjungi semua tetangga terdekat terlebih dahulu sebelum bergerak ke level berikutnya.\n",[25,46,48],{"class":27,"line":47},4,[25,49,38],{"emptyLinePlaceholder":37},[25,51,53],{"class":27,"line":52},5,[25,54,55],{},"> 🔍 BFS menelusuri secara **melebar**, bukan menyelam seperti DFS.\n",[25,57,59],{"class":27,"line":58},6,[25,60,38],{"emptyLinePlaceholder":37},[25,62,64],{"class":27,"line":63},7,[25,65,66],{},"---\n",[25,68,70],{"class":27,"line":69},8,[25,71,38],{"emptyLinePlaceholder":37},[25,73,75],{"class":27,"line":74},9,[25,76,77],{},"## Aplikasi BFS\n",[25,79,81],{"class":27,"line":80},10,[25,82,38],{"emptyLinePlaceholder":37},[25,84,86],{"class":27,"line":85},11,[25,87,88],{},"BFS banyak digunakan dalam berbagai masalah komputer, antara lain:\n",[25,90,92],{"class":27,"line":91},12,[25,93,38],{"emptyLinePlaceholder":37},[25,95,97],{"class":27,"line":96},13,[25,98,99],{},"- 🔁 **Menemukan jalur terpendek** dalam graf tak berbobot.\n",[25,101,103],{"class":27,"line":102},14,[25,104,105],{},"- 🔍 **Pencarian elemen** dalam pohon atau graf.\n",[25,107,109],{"class":27,"line":108},15,[25,110,111],{},"- 🌐 **Analisis jaringan**: Menentukan jarak antar simpul.\n",[25,113,115],{"class":27,"line":114},16,[25,116,117],{},"- 🔧 **Pemecahan puzzle** seperti Rubik, Sudoku, atau pencarian labirin.\n",[25,119,121],{"class":27,"line":120},17,[25,122,123],{},"- 📶 **Broadcasting**: Menyebarkan informasi dari satu node ke semua node.\n",[25,125,127],{"class":27,"line":126},18,[25,128,38],{"emptyLinePlaceholder":37},[25,130,132],{"class":27,"line":131},19,[25,133,66],{},[25,135,137],{"class":27,"line":136},20,[25,138,38],{"emptyLinePlaceholder":37},[25,140,142],{"class":27,"line":141},21,[25,143,144],{},"## Cara Kerja BFS\n",[25,146,148],{"class":27,"line":147},22,[25,149,38],{"emptyLinePlaceholder":37},[25,151,153],{"class":27,"line":152},23,[25,154,155],{},"### Struktur Pendukung:\n",[25,157,159],{"class":27,"line":158},24,[25,160,161],{},"- **Queue (antrian)**: Untuk mengatur urutan simpul yang akan dieksplorasi.\n",[25,163,165],{"class":27,"line":164},25,[25,166,167],{},"- **Visited[]**: Untuk menandai simpul yang sudah dikunjungi agar tidak dikunjungi dua kali.\n",[25,169,171],{"class":27,"line":170},26,[25,172,38],{"emptyLinePlaceholder":37},[25,174,176],{"class":27,"line":175},27,[25,177,178],{},"### Langkah-langkah BFS:\n",[25,180,182],{"class":27,"line":181},28,[25,183,38],{"emptyLinePlaceholder":37},[25,185,187],{"class":27,"line":186},29,[25,188,189],{},"1. Masukkan `start node` ke queue dan tandai sebagai dikunjungi.\n",[25,191,193],{"class":27,"line":192},30,[25,194,195],{},"2. Selama queue tidak kosong:\n",[25,197,199],{"class":27,"line":198},31,[25,200,201],{},"   - Ambil node dari depan queue (dequeue).\n",[25,203,205],{"class":27,"line":204},32,[25,206,207],{},"   - Proses node (misalnya cetak atau simpan hasil).\n",[25,209,211],{"class":27,"line":210},33,[25,212,213],{},"   - Tambahkan semua tetangga **yang belum dikunjungi** ke queue dan tandai sebagai dikunjungi.\n",[25,215,217],{"class":27,"line":216},34,[25,218,38],{"emptyLinePlaceholder":37},[25,220,222],{"class":27,"line":221},35,[25,223,66],{},[25,225,227],{"class":27,"line":226},36,[25,228,38],{"emptyLinePlaceholder":37},[25,230,232],{"class":27,"line":231},37,[25,233,234],{},"## Contoh Kasus\n",[25,236,238],{"class":27,"line":237},38,[25,239,38],{"emptyLinePlaceholder":37},[25,241,243],{"class":27,"line":242},39,[25,244,245],{},"Grafik:\n",[15,247,251],{"className":248,"code":249,"language":250,"meta":20,"style":20},"language-js shiki shiki-themes github-dark github-dark github-light","A\n","js",[22,252,253],{"__ignoreMap":20},[25,254,255],{"class":27,"line":28},[25,256,249],{"class":257},"sAPL1",[259,260,261],"p",{},"/ B C / \\ D E F",[15,263,265],{"className":248,"code":264,"language":250,"meta":20,"style":20},"\n**Tujuan**: Lakukan penelusuran BFS dari node `A`.\n\n### Urutan Penjelajahan:\n`A → B → C → D → E → F`\n\n**Langkah BFS**:\n1. Mulai dari A → `visited[A] = true`, queue: `[A]`\n2. Dequeue A → tetangga B, C → queue: `[B, C]`\n3. Dequeue B → tetangga D, E → queue: `[C, D, E]`\n4. Dequeue C → tetangga F → queue: `[D, E, F]`\n5. Dequeue D → tidak ada tetangga baru\n6. Dequeue E → tidak ada tetangga baru\n7. Dequeue F → selesai\n\n---\n\n## Implementasi BFS dalam C++\n\n```cpp\n#include \u003Ciostream>\n#include \u003Cvector>\n#include \u003Cqueue>\n\nstd::vector\u003Cstd::vector\u003Cint>> adj;\nstd::vector\u003Cbool> visited;\n\nvoid bfs(int startNode) {\n    std::queue\u003Cint> q;\n    visited[startNode] = true;\n    q.push(startNode);\n\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        std::cout \u003C\u003C u \u003C\u003C \" \";\n\n        for (int v : adj[u]) {\n            if (!visited[v]) {\n                visited[v] = true;\n                q.push(v);\n            }\n        }\n    }\n}\n\nint main() {\n    int numNodes = 6; // A=0, B=1, C=2, D=3, E=4, F=5\n    adj.resize(numNodes);\n    visited.resize(numNodes, false);\n\n    // Membangun graf (tidak berarah)\n    adj[0] = {1, 2};     // A → B, C\n    adj[1] = {0, 3, 4};  // B → A, D, E\n    adj[2] = {0, 5};     // C → A, F\n    adj[3] = {1};        // D → B\n    adj[4] = {1};        // E → B\n    adj[5] = {2};        // F → C\n\n    std::cout \u003C\u003C \"BFS dari node A (0): \";\n    bfs(0); // Start dari A (index 0)\n    std::cout \u003C\u003C \"\\n\";\n\n    return 0;\n}\n",[22,266,267,271,299,303,315,320,324,337,366,396,424,447,459,470,482,486,490,494,509,513,518,523,528,533,537,542,547,551,556,561,566,571,575,580,585,590,595,599,604,609,615,621,627,633,639,645,650,656,662,668,674,679,685,691,697,703,709,715,721,726,732,738,750,755,761],{"__ignoreMap":20},[25,268,269],{"class":27,"line":28},[25,270,38],{"emptyLinePlaceholder":37},[25,272,273,277,281,283,286,289,292,296],{"class":27,"line":34},[25,274,276],{"class":275},"sEiGg","**",[25,278,280],{"class":279},"suVJd","Tujuan",[25,282,276],{"class":275},[25,284,285],{"class":279},": Lakukan penelusuran ",[25,287,288],{"class":257},"BFS",[25,290,291],{"class":279}," dari node ",[25,293,295],{"class":294},"sYTnl","`A`",[25,297,298],{"class":279},".\n",[25,300,301],{"class":27,"line":41},[25,302,38],{"emptyLinePlaceholder":37},[25,304,305,308,312],{"class":27,"line":47},[25,306,307],{"class":279},"### Urutan ",[25,309,311],{"class":310},"s9E-l","Penjelajahan",[25,313,314],{"class":279},":\n",[25,316,317],{"class":27,"line":52},[25,318,319],{"class":294},"`A → B → C → D → E → F`\n",[25,321,322],{"class":27,"line":58},[25,323,38],{"emptyLinePlaceholder":37},[25,325,326,328,331,333,335],{"class":27,"line":63},[25,327,276],{"class":275},[25,329,330],{"class":279},"Langkah ",[25,332,288],{"class":257},[25,334,276],{"class":275},[25,336,314],{"class":279},[25,338,339,342,345,348,351,354,357,360,363],{"class":27,"line":69},[25,340,341],{"class":257},"1.",[25,343,344],{"class":279}," Mulai dari ",[25,346,347],{"class":257},"A",[25,349,350],{"class":279}," → ",[25,352,353],{"class":294},"`visited[A] = true`",[25,355,356],{"class":279},", ",[25,358,359],{"class":310},"queue",[25,361,362],{"class":279},": ",[25,364,365],{"class":294},"`[A]`\n",[25,367,368,371,374,376,379,382,384,387,389,391,393],{"class":27,"line":74},[25,369,370],{"class":257},"2.",[25,372,373],{"class":279}," Dequeue ",[25,375,347],{"class":257},[25,377,378],{"class":279}," → tetangga ",[25,380,381],{"class":257},"B",[25,383,356],{"class":279},[25,385,386],{"class":257},"C",[25,388,350],{"class":279},[25,390,359],{"class":310},[25,392,362],{"class":279},[25,394,395],{"class":294},"`[B, C]`\n",[25,397,398,401,403,405,407,410,412,415,417,419,421],{"class":27,"line":80},[25,399,400],{"class":257},"3.",[25,402,373],{"class":279},[25,404,381],{"class":257},[25,406,378],{"class":279},[25,408,409],{"class":257},"D",[25,411,356],{"class":279},[25,413,414],{"class":257},"E",[25,416,350],{"class":279},[25,418,359],{"class":310},[25,420,362],{"class":279},[25,422,423],{"class":294},"`[C, D, E]`\n",[25,425,426,429,431,433,435,438,440,442,444],{"class":27,"line":85},[25,427,428],{"class":257},"4.",[25,430,373],{"class":279},[25,432,386],{"class":257},[25,434,378],{"class":279},[25,436,437],{"class":257},"F",[25,439,350],{"class":279},[25,441,359],{"class":310},[25,443,362],{"class":279},[25,445,446],{"class":294},"`[D, E, F]`\n",[25,448,449,452,454,456],{"class":27,"line":91},[25,450,451],{"class":257},"5.",[25,453,373],{"class":279},[25,455,409],{"class":257},[25,457,458],{"class":279}," → tidak ada tetangga baru\n",[25,460,461,464,466,468],{"class":27,"line":96},[25,462,463],{"class":257},"6.",[25,465,373],{"class":279},[25,467,414],{"class":257},[25,469,458],{"class":279},[25,471,472,475,477,479],{"class":27,"line":102},[25,473,474],{"class":257},"7.",[25,476,373],{"class":279},[25,478,437],{"class":257},[25,480,481],{"class":279}," → selesai\n",[25,483,484],{"class":27,"line":108},[25,485,38],{"emptyLinePlaceholder":37},[25,487,488],{"class":27,"line":114},[25,489,66],{"class":275},[25,491,492],{"class":27,"line":120},[25,493,38],{"emptyLinePlaceholder":37},[25,495,496,499,501,504,506],{"class":27,"line":126},[25,497,498],{"class":279},"## Implementasi ",[25,500,288],{"class":257},[25,502,503],{"class":279}," dalam ",[25,505,386],{"class":257},[25,507,508],{"class":275},"++\n",[25,510,511],{"class":27,"line":131},[25,512,38],{"emptyLinePlaceholder":37},[25,514,515],{"class":27,"line":136},[25,516,517],{"class":294},"```cpp\n",[25,519,520],{"class":27,"line":141},[25,521,522],{"class":294},"#include \u003Ciostream>\n",[25,524,525],{"class":27,"line":147},[25,526,527],{"class":294},"#include \u003Cvector>\n",[25,529,530],{"class":27,"line":152},[25,531,532],{"class":294},"#include \u003Cqueue>\n",[25,534,535],{"class":27,"line":158},[25,536,38],{"emptyLinePlaceholder":37},[25,538,539],{"class":27,"line":164},[25,540,541],{"class":294},"std::vector\u003Cstd::vector\u003Cint>> adj;\n",[25,543,544],{"class":27,"line":170},[25,545,546],{"class":294},"std::vector\u003Cbool> visited;\n",[25,548,549],{"class":27,"line":175},[25,550,38],{"emptyLinePlaceholder":37},[25,552,553],{"class":27,"line":181},[25,554,555],{"class":294},"void bfs(int startNode) {\n",[25,557,558],{"class":27,"line":186},[25,559,560],{"class":294},"    std::queue\u003Cint> q;\n",[25,562,563],{"class":27,"line":192},[25,564,565],{"class":294},"    visited[startNode] = true;\n",[25,567,568],{"class":27,"line":198},[25,569,570],{"class":294},"    q.push(startNode);\n",[25,572,573],{"class":27,"line":204},[25,574,38],{"emptyLinePlaceholder":37},[25,576,577],{"class":27,"line":210},[25,578,579],{"class":294},"    while (!q.empty()) {\n",[25,581,582],{"class":27,"line":216},[25,583,584],{"class":294},"        int u = q.front();\n",[25,586,587],{"class":27,"line":221},[25,588,589],{"class":294},"        q.pop();\n",[25,591,592],{"class":27,"line":226},[25,593,594],{"class":294},"        std::cout \u003C\u003C u \u003C\u003C \" \";\n",[25,596,597],{"class":27,"line":231},[25,598,38],{"emptyLinePlaceholder":37},[25,600,601],{"class":27,"line":237},[25,602,603],{"class":294},"        for (int v : adj[u]) {\n",[25,605,606],{"class":27,"line":242},[25,607,608],{"class":294},"            if (!visited[v]) {\n",[25,610,612],{"class":27,"line":611},40,[25,613,614],{"class":294},"                visited[v] = true;\n",[25,616,618],{"class":27,"line":617},41,[25,619,620],{"class":294},"                q.push(v);\n",[25,622,624],{"class":27,"line":623},42,[25,625,626],{"class":294},"            }\n",[25,628,630],{"class":27,"line":629},43,[25,631,632],{"class":294},"        }\n",[25,634,636],{"class":27,"line":635},44,[25,637,638],{"class":294},"    }\n",[25,640,642],{"class":27,"line":641},45,[25,643,644],{"class":294},"}\n",[25,646,648],{"class":27,"line":647},46,[25,649,38],{"emptyLinePlaceholder":37},[25,651,653],{"class":27,"line":652},47,[25,654,655],{"class":294},"int main() {\n",[25,657,659],{"class":27,"line":658},48,[25,660,661],{"class":294},"    int numNodes = 6; // A=0, B=1, C=2, D=3, E=4, F=5\n",[25,663,665],{"class":27,"line":664},49,[25,666,667],{"class":294},"    adj.resize(numNodes);\n",[25,669,671],{"class":27,"line":670},50,[25,672,673],{"class":294},"    visited.resize(numNodes, false);\n",[25,675,677],{"class":27,"line":676},51,[25,678,38],{"emptyLinePlaceholder":37},[25,680,682],{"class":27,"line":681},52,[25,683,684],{"class":294},"    // Membangun graf (tidak berarah)\n",[25,686,688],{"class":27,"line":687},53,[25,689,690],{"class":294},"    adj[0] = {1, 2};     // A → B, C\n",[25,692,694],{"class":27,"line":693},54,[25,695,696],{"class":294},"    adj[1] = {0, 3, 4};  // B → A, D, E\n",[25,698,700],{"class":27,"line":699},55,[25,701,702],{"class":294},"    adj[2] = {0, 5};     // C → A, F\n",[25,704,706],{"class":27,"line":705},56,[25,707,708],{"class":294},"    adj[3] = {1};        // D → B\n",[25,710,712],{"class":27,"line":711},57,[25,713,714],{"class":294},"    adj[4] = {1};        // E → B\n",[25,716,718],{"class":27,"line":717},58,[25,719,720],{"class":294},"    adj[5] = {2};        // F → C\n",[25,722,724],{"class":27,"line":723},59,[25,725,38],{"emptyLinePlaceholder":37},[25,727,729],{"class":27,"line":728},60,[25,730,731],{"class":294},"    std::cout \u003C\u003C \"BFS dari node A (0): \";\n",[25,733,735],{"class":27,"line":734},61,[25,736,737],{"class":294},"    bfs(0); // Start dari A (index 0)\n",[25,739,741,744,747],{"class":27,"line":740},62,[25,742,743],{"class":294},"    std::cout \u003C\u003C \"",[25,745,746],{"class":257},"\\n",[25,748,749],{"class":294},"\";\n",[25,751,753],{"class":27,"line":752},63,[25,754,38],{"emptyLinePlaceholder":37},[25,756,758],{"class":27,"line":757},64,[25,759,760],{"class":294},"    return 0;\n",[25,762,764],{"class":27,"line":763},65,[25,765,644],{"class":294},[767,768,770],"h2",{"id":769},"kelebihan-dan-kekurangan","Kelebihan dan Kekurangan",[772,773,775],"h3",{"id":774},"kelebihan-bfs","✅ Kelebihan BFS:",[777,778,779,787,793],"ul",{},[780,781,782,786],"li",{},[783,784,785],"strong",{},"Menemukan jalur terpendek"," dalam graf tak berbobot.",[780,788,789,792],{},[783,790,791],{},"Bekerja baik pada graf level-wise",", misalnya puzzle, pohon.",[780,794,795],{},"Efektif untuk menjelajahi semua node dalam urutan terstruktur.",[772,797,799],{"id":798},"kekurangan-bfs","❌ Kekurangan BFS:",[777,801,802,809,812],{},[780,803,804,805,808],{},"Memakan ",[783,806,807],{},"memori besar"," jika graf memiliki banyak node di level yang sama.",[780,810,811],{},"Kurang cocok untuk graf sangat dalam (deep tree) dibanding DFS.",[780,813,814,817],{},[783,815,816],{},"Lebih lambat"," dari DFS pada graf dengan solusi dalam jalur panjang tunggal.",[819,820,821],"blockquote",{},[259,822,823,824,827,828,831,832,834],{},"Kompleksitas waktu BFS adalah ",[783,825,826],{},"O(V + E)",", di mana ",[22,829,830],{},"V"," = simpul, ",[22,833,414],{}," = sisi.",[767,836,838],{"id":837},"kesimpulan","Kesimpulan",[259,840,841,844],{},[783,842,843],{},"Breadth-First Search (BFS)"," adalah algoritma fundamental yang sangat berguna dalam berbagai aplikasi komputer, terutama ketika kita ingin mengeksplorasi data secara level-by-level atau mencari solusi tercepat.",[819,846,847],{},[259,848,849],{},"BFS sangat cocok untuk pencarian jalur terpendek dan eksplorasi yang merata, menjadikannya pelengkap ideal dari DFS.",[851,852,853],"style",{},"html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html pre.shiki code .sAPL1, html code.shiki .sAPL1{--shiki-dark:#79B8FF;--shiki-default:#79B8FF;--shiki-light:#005CC5}html pre.shiki code .sEiGg, html code.shiki .sEiGg{--shiki-dark:#F97583;--shiki-default:#F97583;--shiki-light:#D73A49}html pre.shiki code .suVJd, html code.shiki .suVJd{--shiki-dark:#E1E4E8;--shiki-default:#E1E4E8;--shiki-light:#24292E}html pre.shiki code .sYTnl, html code.shiki .sYTnl{--shiki-dark:#9ECBFF;--shiki-default:#9ECBFF;--shiki-light:#032F62}html pre.shiki code .s9E-l, html code.shiki .s9E-l{--shiki-dark:#B392F0;--shiki-default:#B392F0;--shiki-light:#6F42C1}",{"title":20,"searchDepth":34,"depth":34,"links":855},[856,860],{"id":769,"depth":34,"text":770,"children":857},[858,859],{"id":774,"depth":41,"text":775},{"id":798,"depth":41,"text":799},{"id":837,"depth":34,"text":838},null,"BFS adalah algoritma penelusuran graf yang menjelajahi simpul tingkat demi tingkat, memastikan semua tetangga pada tingkat saat ini dikunjungi sebelum pindah ke tingkat berikutnya.","md",{"script":865},[866],{"type":867,"key":868,"data-nuxt-schema-org":37,"nodes":869},"application/ld+json","schema-org-graph",[870],{"_resolver":871},"webPage","/articles/4.jpeg",{},{"props":875},{},"/en/articles/breadth-firts-search",{"_resolver":871},{"title":5,"description":862},{"loc":876,"videos":880,"images":881,"lastmod":882},[],[],"2025-06-13T00:00:00.000Z","en/articles/breadth-firts-search",[],"lr5lH3EUrpNDCw9-vOfyH-c6-5IWHHS3yCeuyIOyS-k",1750332717784]