[{"data":1,"prerenderedAt":726},["ShallowReactive",2],{"/en/articles/activity-promblem-selection":3},{"id":4,"title":5,"body":6,"date":701,"description":702,"extension":703,"head":704,"image":712,"meta":713,"navigation":37,"ogImage":714,"path":716,"readingTime":701,"robots":701,"schemaOrg":717,"seo":718,"sitemap":719,"stem":723,"tags":724,"__hash__":725},"articles_en/en/articles/activity-promblem-selection.md","Memahami Activity Selection Problem",{"type":7,"value":8,"toc":688},"minimal",[9,14,447,452,560,564,572,579,586,591,595,608,612,630,634,651,655,674,684],[10,11,13],"h1",{"id":12},"activity-promblem-selection","ACTIVITY PROMBLEM SELECTION",[15,16,21],"pre",{"className":17,"code":18,"language":19,"meta":20,"style":20},"language-markdown shiki shiki-themes github-dark github-dark github-light","# 🗓️ Apa itu Activity Selection Problem?\n\n**Activity Selection Problem** adalah masalah optimisasi klasik dalam ilmu komputer. Tujuannya adalah untuk **memilih sebanyak mungkin aktivitas** dari himpunan yang diberikan **tanpa ada yang saling tumpang tindih**, dengan setiap aktivitas memiliki waktu mulai dan selesai.\n\n🧠 Masalah ini diselesaikan menggunakan pendekatan **greedy**, yang memilih aktivitas dengan **waktu selesai paling awal** terlebih dahulu.\n\n---\n\n## 📌 Aplikasi Nyata\n\n- 📅 Penjadwalan rapat atau kelas dalam satu ruangan\n- 🧑‍💼 Manajemen tugas dalam satu waktu kerja\n- 🖥️ Penjadwalan proses di CPU\n- 🌐 Alokasi bandwidth di jaringan\n\n---\n\n## 🔧 Cara Kerja Algoritma Greedy\n\n1. **Urutkan aktivitas** berdasarkan waktu selesai secara ascending.\n2. **Pilih aktivitas pertama** (dengan waktu selesai paling awal).\n3. Tandai waktu selesai aktivitas ini sebagai batas terakhir.\n4. Untuk setiap aktivitas berikutnya:\n   - Jika waktu mulai ≥ batas terakhir → pilih aktivitas\n   - Perbarui batas terakhir menjadi waktu selesai aktivitas tersebut.\n\n📈 Algoritma ini **menjamin jumlah maksimal aktivitas** yang dapat dipilih **tanpa konflik**.\n\n---\n\n## 🧮 Contoh Permasalahan\n\n### Daftar Aktivitas\n\n| Aktivitas | Mulai | Selesai |\n|-----------|--------|---------|\n| A1        | 1      | 4       |\n| A2        | 3      | 5       |\n| A3        | 5      | 7       |\n| A4        | 3      | 8       |\n| A5        | 8      | 9       |\n\n### Langkah Solusi:\n\n1. Urutkan: A1(4), A2(5), A3(7), A4(8), A5(9)\n2. Pilih A1 (selesai jam 4)\n3. Lewati A2 & A4 (karena mulai \u003C 4)\n4. Pilih A3 (mulai jam 5)\n5. Pilih A5 (mulai jam 8)\n\n✅ **Solusi:** A1, A3, A5\n\n---\n\n## 🐍 Implementasi Python\n\n```python\ndef activity_selection(start, finish):\n    activities = sorted(zip(start, finish), key=lambda x: x[1])\n    result = []\n    last_finish_time = -1\n\n    for s, f in activities:\n        if s >= last_finish_time:\n            result.append((s, f))\n            last_finish_time = f\n\n    return result\n\n# Contoh penggunaan\nstart = [1, 3, 5, 3, 8]\nfinish = [4, 5, 7, 8, 9]\nselected = activity_selection(start, finish)\nprint(\"Aktivitas yang dipilih:\", selected)\n","markdown","",[22,23,24,32,39,45,50,56,61,67,72,78,83,89,95,101,107,112,117,122,128,133,139,145,151,157,163,169,174,180,185,190,195,201,206,212,217,223,229,235,241,247,253,259,264,270,275,281,287,293,299,305,310,316,321,326,331,337,342,348,354,360,366,372,377,383,389,395,401,406,412,417,423,429,435,441],"code",{"__ignoreMap":20},[25,26,29],"span",{"class":27,"line":28},"line",1,[25,30,31],{},"# 🗓️ Apa itu Activity Selection Problem?\n",[25,33,35],{"class":27,"line":34},2,[25,36,38],{"emptyLinePlaceholder":37},true,"\n",[25,40,42],{"class":27,"line":41},3,[25,43,44],{},"**Activity Selection Problem** adalah masalah optimisasi klasik dalam ilmu komputer. Tujuannya adalah untuk **memilih sebanyak mungkin aktivitas** dari himpunan yang diberikan **tanpa ada yang saling tumpang tindih**, dengan setiap aktivitas memiliki waktu mulai dan selesai.\n",[25,46,48],{"class":27,"line":47},4,[25,49,38],{"emptyLinePlaceholder":37},[25,51,53],{"class":27,"line":52},5,[25,54,55],{},"🧠 Masalah ini diselesaikan menggunakan pendekatan **greedy**, yang memilih aktivitas dengan **waktu selesai paling awal** terlebih dahulu.\n",[25,57,59],{"class":27,"line":58},6,[25,60,38],{"emptyLinePlaceholder":37},[25,62,64],{"class":27,"line":63},7,[25,65,66],{},"---\n",[25,68,70],{"class":27,"line":69},8,[25,71,38],{"emptyLinePlaceholder":37},[25,73,75],{"class":27,"line":74},9,[25,76,77],{},"## 📌 Aplikasi Nyata\n",[25,79,81],{"class":27,"line":80},10,[25,82,38],{"emptyLinePlaceholder":37},[25,84,86],{"class":27,"line":85},11,[25,87,88],{},"- 📅 Penjadwalan rapat atau kelas dalam satu ruangan\n",[25,90,92],{"class":27,"line":91},12,[25,93,94],{},"- 🧑‍💼 Manajemen tugas dalam satu waktu kerja\n",[25,96,98],{"class":27,"line":97},13,[25,99,100],{},"- 🖥️ Penjadwalan proses di CPU\n",[25,102,104],{"class":27,"line":103},14,[25,105,106],{},"- 🌐 Alokasi bandwidth di jaringan\n",[25,108,110],{"class":27,"line":109},15,[25,111,38],{"emptyLinePlaceholder":37},[25,113,115],{"class":27,"line":114},16,[25,116,66],{},[25,118,120],{"class":27,"line":119},17,[25,121,38],{"emptyLinePlaceholder":37},[25,123,125],{"class":27,"line":124},18,[25,126,127],{},"## 🔧 Cara Kerja Algoritma Greedy\n",[25,129,131],{"class":27,"line":130},19,[25,132,38],{"emptyLinePlaceholder":37},[25,134,136],{"class":27,"line":135},20,[25,137,138],{},"1. **Urutkan aktivitas** berdasarkan waktu selesai secara ascending.\n",[25,140,142],{"class":27,"line":141},21,[25,143,144],{},"2. **Pilih aktivitas pertama** (dengan waktu selesai paling awal).\n",[25,146,148],{"class":27,"line":147},22,[25,149,150],{},"3. Tandai waktu selesai aktivitas ini sebagai batas terakhir.\n",[25,152,154],{"class":27,"line":153},23,[25,155,156],{},"4. Untuk setiap aktivitas berikutnya:\n",[25,158,160],{"class":27,"line":159},24,[25,161,162],{},"   - Jika waktu mulai ≥ batas terakhir → pilih aktivitas\n",[25,164,166],{"class":27,"line":165},25,[25,167,168],{},"   - Perbarui batas terakhir menjadi waktu selesai aktivitas tersebut.\n",[25,170,172],{"class":27,"line":171},26,[25,173,38],{"emptyLinePlaceholder":37},[25,175,177],{"class":27,"line":176},27,[25,178,179],{},"📈 Algoritma ini **menjamin jumlah maksimal aktivitas** yang dapat dipilih **tanpa konflik**.\n",[25,181,183],{"class":27,"line":182},28,[25,184,38],{"emptyLinePlaceholder":37},[25,186,188],{"class":27,"line":187},29,[25,189,66],{},[25,191,193],{"class":27,"line":192},30,[25,194,38],{"emptyLinePlaceholder":37},[25,196,198],{"class":27,"line":197},31,[25,199,200],{},"## 🧮 Contoh Permasalahan\n",[25,202,204],{"class":27,"line":203},32,[25,205,38],{"emptyLinePlaceholder":37},[25,207,209],{"class":27,"line":208},33,[25,210,211],{},"### Daftar Aktivitas\n",[25,213,215],{"class":27,"line":214},34,[25,216,38],{"emptyLinePlaceholder":37},[25,218,220],{"class":27,"line":219},35,[25,221,222],{},"| Aktivitas | Mulai | Selesai |\n",[25,224,226],{"class":27,"line":225},36,[25,227,228],{},"|-----------|--------|---------|\n",[25,230,232],{"class":27,"line":231},37,[25,233,234],{},"| A1        | 1      | 4       |\n",[25,236,238],{"class":27,"line":237},38,[25,239,240],{},"| A2        | 3      | 5       |\n",[25,242,244],{"class":27,"line":243},39,[25,245,246],{},"| A3        | 5      | 7       |\n",[25,248,250],{"class":27,"line":249},40,[25,251,252],{},"| A4        | 3      | 8       |\n",[25,254,256],{"class":27,"line":255},41,[25,257,258],{},"| A5        | 8      | 9       |\n",[25,260,262],{"class":27,"line":261},42,[25,263,38],{"emptyLinePlaceholder":37},[25,265,267],{"class":27,"line":266},43,[25,268,269],{},"### Langkah Solusi:\n",[25,271,273],{"class":27,"line":272},44,[25,274,38],{"emptyLinePlaceholder":37},[25,276,278],{"class":27,"line":277},45,[25,279,280],{},"1. Urutkan: A1(4), A2(5), A3(7), A4(8), A5(9)\n",[25,282,284],{"class":27,"line":283},46,[25,285,286],{},"2. Pilih A1 (selesai jam 4)\n",[25,288,290],{"class":27,"line":289},47,[25,291,292],{},"3. Lewati A2 & A4 (karena mulai \u003C 4)\n",[25,294,296],{"class":27,"line":295},48,[25,297,298],{},"4. Pilih A3 (mulai jam 5)\n",[25,300,302],{"class":27,"line":301},49,[25,303,304],{},"5. Pilih A5 (mulai jam 8)\n",[25,306,308],{"class":27,"line":307},50,[25,309,38],{"emptyLinePlaceholder":37},[25,311,313],{"class":27,"line":312},51,[25,314,315],{},"✅ **Solusi:** A1, A3, A5\n",[25,317,319],{"class":27,"line":318},52,[25,320,38],{"emptyLinePlaceholder":37},[25,322,324],{"class":27,"line":323},53,[25,325,66],{},[25,327,329],{"class":27,"line":328},54,[25,330,38],{"emptyLinePlaceholder":37},[25,332,334],{"class":27,"line":333},55,[25,335,336],{},"## 🐍 Implementasi Python\n",[25,338,340],{"class":27,"line":339},56,[25,341,38],{"emptyLinePlaceholder":37},[25,343,345],{"class":27,"line":344},57,[25,346,347],{},"```python\n",[25,349,351],{"class":27,"line":350},58,[25,352,353],{},"def activity_selection(start, finish):\n",[25,355,357],{"class":27,"line":356},59,[25,358,359],{},"    activities = sorted(zip(start, finish), key=lambda x: x[1])\n",[25,361,363],{"class":27,"line":362},60,[25,364,365],{},"    result = []\n",[25,367,369],{"class":27,"line":368},61,[25,370,371],{},"    last_finish_time = -1\n",[25,373,375],{"class":27,"line":374},62,[25,376,38],{"emptyLinePlaceholder":37},[25,378,380],{"class":27,"line":379},63,[25,381,382],{},"    for s, f in activities:\n",[25,384,386],{"class":27,"line":385},64,[25,387,388],{},"        if s >= last_finish_time:\n",[25,390,392],{"class":27,"line":391},65,[25,393,394],{},"            result.append((s, f))\n",[25,396,398],{"class":27,"line":397},66,[25,399,400],{},"            last_finish_time = f\n",[25,402,404],{"class":27,"line":403},67,[25,405,38],{"emptyLinePlaceholder":37},[25,407,409],{"class":27,"line":408},68,[25,410,411],{},"    return result\n",[25,413,415],{"class":27,"line":414},69,[25,416,38],{"emptyLinePlaceholder":37},[25,418,420],{"class":27,"line":419},70,[25,421,422],{},"# Contoh penggunaan\n",[25,424,426],{"class":27,"line":425},71,[25,427,428],{},"start = [1, 3, 5, 3, 8]\n",[25,430,432],{"class":27,"line":431},72,[25,433,434],{},"finish = [4, 5, 7, 8, 9]\n",[25,436,438],{"class":27,"line":437},73,[25,439,440],{},"selected = activity_selection(start, finish)\n",[25,442,444],{"class":27,"line":443},74,[25,445,446],{},"print(\"Aktivitas yang dipilih:\", selected)\n",[448,449,451],"h2",{"id":450},"️-implementasi-javascript","🖥️ Implementasi JavaScript",[15,453,457],{"className":454,"code":455,"language":456,"meta":20,"style":20},"language-javascript shiki shiki-themes github-dark github-dark github-light","function activitySelection(start, finish) {\n    const activities = start.map((s, i) => ({ start: s, finish: finish[i] }));\n    activities.sort((a, b) => a.finish - b.finish);\n\n    const result = [];\n    let lastFinish = -1;\n\n    for (let act of activities) {\n        if (act.start >= lastFinish) {\n            result.push(act);\n            lastFinish = act.finish;\n        }\n    }\n\n    return result;\n}\n\n// Contoh penggunaan\nconst start = [1, 3, 5, 3, 8];\nconst finish = [4, 5, 7, 8, 9];\nconsole.log(\"Aktivitas yang dipilih:\", activitySelection(start, finish));\n","javascript",[22,458,459,464,469,474,478,483,488,492,497,502,507,512,517,522,526,531,536,540,545,550,555],{"__ignoreMap":20},[25,460,461],{"class":27,"line":28},[25,462,463],{},"function activitySelection(start, finish) {\n",[25,465,466],{"class":27,"line":34},[25,467,468],{},"    const activities = start.map((s, i) => ({ start: s, finish: finish[i] }));\n",[25,470,471],{"class":27,"line":41},[25,472,473],{},"    activities.sort((a, b) => a.finish - b.finish);\n",[25,475,476],{"class":27,"line":47},[25,477,38],{"emptyLinePlaceholder":37},[25,479,480],{"class":27,"line":52},[25,481,482],{},"    const result = [];\n",[25,484,485],{"class":27,"line":58},[25,486,487],{},"    let lastFinish = -1;\n",[25,489,490],{"class":27,"line":63},[25,491,38],{"emptyLinePlaceholder":37},[25,493,494],{"class":27,"line":69},[25,495,496],{},"    for (let act of activities) {\n",[25,498,499],{"class":27,"line":74},[25,500,501],{},"        if (act.start >= lastFinish) {\n",[25,503,504],{"class":27,"line":80},[25,505,506],{},"            result.push(act);\n",[25,508,509],{"class":27,"line":85},[25,510,511],{},"            lastFinish = act.finish;\n",[25,513,514],{"class":27,"line":91},[25,515,516],{},"        }\n",[25,518,519],{"class":27,"line":97},[25,520,521],{},"    }\n",[25,523,524],{"class":27,"line":103},[25,525,38],{"emptyLinePlaceholder":37},[25,527,528],{"class":27,"line":109},[25,529,530],{},"    return result;\n",[25,532,533],{"class":27,"line":114},[25,534,535],{},"}\n",[25,537,538],{"class":27,"line":119},[25,539,38],{"emptyLinePlaceholder":37},[25,541,542],{"class":27,"line":124},[25,543,544],{},"// Contoh penggunaan\n",[25,546,547],{"class":27,"line":130},[25,548,549],{},"const start = [1, 3, 5, 3, 8];\n",[25,551,552],{"class":27,"line":135},[25,553,554],{},"const finish = [4, 5, 7, 8, 9];\n",[25,556,557],{"class":27,"line":141},[25,558,559],{},"console.log(\"Aktivitas yang dipilih:\", activitySelection(start, finish));\n",[448,561,563],{"id":562},"️-kompleksitas-optimasi","⏱️ Kompleksitas & Optimasi",[565,566,568,569],"h3",{"id":567},"waktu-on-log-n","⏳ Waktu: ",[22,570,571],{},"O(n log n)",[573,574,575],"ul",{},[576,577,578],"li",{},"Karena proses pengurutan berdasarkan waktu selesai",[565,580,582,583],{"id":581},"ruang-on","💾 Ruang: ",[22,584,585],{},"O(n)",[573,587,588],{},[576,589,590],{},"Untuk menyimpan aktivitas yang diurutkan dan hasil",[565,592,594],{"id":593},"optimasi","⚡ Optimasi:",[573,596,597,602,605],{},[576,598,599,600],{},"Pre-sorting jika data sudah urut → ",[22,601,585],{},[576,603,604],{},"In-place sorting → hemat memori",[576,606,607],{},"Penggunaan struktur data efisien untuk jumlah besar aktivitas",[448,609,611],{"id":610},"kelebihan","✅ Kelebihan",[573,613,614,621,627],{},[576,615,616,617],{},"🧠 ",[618,619,620],"strong",{},"Sederhana & intuitif",[576,622,623,624],{},"🚀 ",[618,625,626],{},"Cepat & efisien",[576,628,629],{},"📚 Cocok untuk pembelajaran algoritma greedy",[448,631,633],{"id":632},"kekurangan","❌ Kekurangan",[573,635,636,642,645],{},[576,637,638,639],{},"Tidak mendukung ",[618,640,641],{},"aktivitas yang overlap sebagian",[576,643,644],{},"Tidak optimal jika kriteria bukan waktu selesai",[576,646,647,648],{},"Memerlukan ",[618,649,650],{},"pengurutan awal",[448,652,654],{"id":653},"kesimpulan","🎯 Kesimpulan",[656,657,658,661,662,665,666,669,670,673],"p",{},[618,659,660],{},"Activity Selection Problem"," adalah contoh klasik dari algoritma ",[618,663,664],{},"greedy"," yang bekerja sangat baik pada masalah ",[618,667,668],{},"penjadwalan",". Dengan memilih aktivitas berdasarkan waktu selesai paling cepat, kita dapat menjadwalkan aktivitas sebanyak mungkin ",[618,671,672],{},"tanpa konflik",".",[675,676,677],"blockquote",{},[656,678,679,680],{},"🔎 ",[681,682,683],"em",{},"Greedy works when local optimum leads to global optimum—Activity Selection is a perfect case for that!",[685,686,687],"style",{},"html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}",{"title":20,"searchDepth":34,"depth":34,"links":689},[690,691,698,699,700],{"id":450,"depth":34,"text":451},{"id":562,"depth":34,"text":563,"children":692},[693,695,697],{"id":567,"depth":41,"text":694},"⏳ Waktu: O(n log n)",{"id":581,"depth":41,"text":696},"💾 Ruang: O(n)",{"id":593,"depth":41,"text":594},{"id":610,"depth":34,"text":611},{"id":632,"depth":34,"text":633},{"id":653,"depth":34,"text":654},null,"Pelajari bagaimana memilih aktivitas maksimum yang tidak saling tumpang tindih menggunakan pendekatan greedy.","md",{"script":705},[706],{"type":707,"key":708,"data-nuxt-schema-org":37,"nodes":709},"application/ld+json","schema-org-graph",[710],{"_resolver":711},"webPage","/articles/10.jpeg",{},{"props":715},{},"/en/articles/activity-promblem-selection",{"_resolver":711},{"title":5,"description":702},{"loc":716,"videos":720,"images":721,"lastmod":722},[],[],"2025-06-14T00:00:00.000Z","en/articles/activity-promblem-selection",[],"kStsjvioomql7aanPuH17vkw5U3WiKCCGHYblJ0wG88",1750351329286]