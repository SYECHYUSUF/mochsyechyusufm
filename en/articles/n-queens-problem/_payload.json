[{"data":1,"prerenderedAt":1119},["ShallowReactive",2],{"/en/articles/n-queens-problem":3},{"id":4,"title":5,"body":6,"date":1094,"description":1095,"extension":1096,"head":1097,"image":1105,"meta":1106,"navigation":37,"ogImage":1107,"path":1109,"readingTime":1094,"robots":1094,"schemaOrg":1110,"seo":1111,"sitemap":1112,"stem":1116,"tags":1117,"__hash__":1118},"articles_en/en/articles/n-queens-problem.md","Masalah N-Queen",{"type":7,"value":8,"toc":1081},"minimal",[9,14,253,257,704,709,916,920,925,939,943,958,962,966,986,990,1014,1018,1048,1052,1067,1077],[10,11,13],"h1",{"id":12},"n-queens-problem","N QUEENS PROBLEM",[15,16,21],"pre",{"className":17,"code":18,"language":19,"meta":20,"style":20},"language-markdown shiki shiki-themes github-dark github-dark github-light","# Apa itu Masalah N-Queen?\n\n**Masalah N-Queen** adalah sebuah teka-teki klasik dalam ilmu komputer yang menanyakan:\n\n> \"Bagaimana cara menempatkan **N ratu** pada papan catur **N×N** sehingga **tidak ada dua ratu yang saling menyerang**?\"\n\nArtinya, tidak ada dua ratu yang berada dalam **baris**, **kolom**, atau **diagonal** yang sama.\n\n---\n\n## Sejarah Singkat\n\nMasalah ini pertama kali diperkenalkan oleh **Max Bezzel** pada tahun **1848** dan telah menjadi:\n- 🔄 Contoh klasik untuk **algoritma backtracking**\n- 🧠 Pertanyaan umum dalam **wawancara teknis**\n- 🎓 Materi pengajaran **rekursi dan constraint solving**\n- 🔬 Topik riset dalam **AI dan optimisasi kombinatorial**\n\n---\n\n## Aturan & Kendala\n\n### 🔁 Pergerakan Ratu Catur\nRatu dapat menyerang:\n- Secara **horizontal** (baris)\n- Secara **vertikal** (kolom)\n- Secara **diagonal** (↘ dan ↙)\n\n### ✅ Syarat Solusi:\n- Tepat **N ratu** ditempatkan di papan **N×N**\n- Tidak ada dua ratu yang berada:\n  - Pada baris yang sama\n  - Pada kolom yang sama\n  - Pada diagonal yang sama\n\n---\n\n## Contoh Masalah: 4-Queen\n\nSalah satu solusi untuk **N=4**:\n\n","markdown","",[22,23,24,32,39,45,50,56,61,67,72,78,83,89,94,100,106,112,118,124,129,134,139,145,150,156,162,168,174,180,185,191,197,203,209,215,221,226,231,236,242,247],"code",{"__ignoreMap":20},[25,26,29],"span",{"class":27,"line":28},"line",1,[25,30,31],{},"# Apa itu Masalah N-Queen?\n",[25,33,35],{"class":27,"line":34},2,[25,36,38],{"emptyLinePlaceholder":37},true,"\n",[25,40,42],{"class":27,"line":41},3,[25,43,44],{},"**Masalah N-Queen** adalah sebuah teka-teki klasik dalam ilmu komputer yang menanyakan:\n",[25,46,48],{"class":27,"line":47},4,[25,49,38],{"emptyLinePlaceholder":37},[25,51,53],{"class":27,"line":52},5,[25,54,55],{},"> \"Bagaimana cara menempatkan **N ratu** pada papan catur **N×N** sehingga **tidak ada dua ratu yang saling menyerang**?\"\n",[25,57,59],{"class":27,"line":58},6,[25,60,38],{"emptyLinePlaceholder":37},[25,62,64],{"class":27,"line":63},7,[25,65,66],{},"Artinya, tidak ada dua ratu yang berada dalam **baris**, **kolom**, atau **diagonal** yang sama.\n",[25,68,70],{"class":27,"line":69},8,[25,71,38],{"emptyLinePlaceholder":37},[25,73,75],{"class":27,"line":74},9,[25,76,77],{},"---\n",[25,79,81],{"class":27,"line":80},10,[25,82,38],{"emptyLinePlaceholder":37},[25,84,86],{"class":27,"line":85},11,[25,87,88],{},"## Sejarah Singkat\n",[25,90,92],{"class":27,"line":91},12,[25,93,38],{"emptyLinePlaceholder":37},[25,95,97],{"class":27,"line":96},13,[25,98,99],{},"Masalah ini pertama kali diperkenalkan oleh **Max Bezzel** pada tahun **1848** dan telah menjadi:\n",[25,101,103],{"class":27,"line":102},14,[25,104,105],{},"- 🔄 Contoh klasik untuk **algoritma backtracking**\n",[25,107,109],{"class":27,"line":108},15,[25,110,111],{},"- 🧠 Pertanyaan umum dalam **wawancara teknis**\n",[25,113,115],{"class":27,"line":114},16,[25,116,117],{},"- 🎓 Materi pengajaran **rekursi dan constraint solving**\n",[25,119,121],{"class":27,"line":120},17,[25,122,123],{},"- 🔬 Topik riset dalam **AI dan optimisasi kombinatorial**\n",[25,125,127],{"class":27,"line":126},18,[25,128,38],{"emptyLinePlaceholder":37},[25,130,132],{"class":27,"line":131},19,[25,133,77],{},[25,135,137],{"class":27,"line":136},20,[25,138,38],{"emptyLinePlaceholder":37},[25,140,142],{"class":27,"line":141},21,[25,143,144],{},"## Aturan & Kendala\n",[25,146,148],{"class":27,"line":147},22,[25,149,38],{"emptyLinePlaceholder":37},[25,151,153],{"class":27,"line":152},23,[25,154,155],{},"### 🔁 Pergerakan Ratu Catur\n",[25,157,159],{"class":27,"line":158},24,[25,160,161],{},"Ratu dapat menyerang:\n",[25,163,165],{"class":27,"line":164},25,[25,166,167],{},"- Secara **horizontal** (baris)\n",[25,169,171],{"class":27,"line":170},26,[25,172,173],{},"- Secara **vertikal** (kolom)\n",[25,175,177],{"class":27,"line":176},27,[25,178,179],{},"- Secara **diagonal** (↘ dan ↙)\n",[25,181,183],{"class":27,"line":182},28,[25,184,38],{"emptyLinePlaceholder":37},[25,186,188],{"class":27,"line":187},29,[25,189,190],{},"### ✅ Syarat Solusi:\n",[25,192,194],{"class":27,"line":193},30,[25,195,196],{},"- Tepat **N ratu** ditempatkan di papan **N×N**\n",[25,198,200],{"class":27,"line":199},31,[25,201,202],{},"- Tidak ada dua ratu yang berada:\n",[25,204,206],{"class":27,"line":205},32,[25,207,208],{},"  - Pada baris yang sama\n",[25,210,212],{"class":27,"line":211},33,[25,213,214],{},"  - Pada kolom yang sama\n",[25,216,218],{"class":27,"line":217},34,[25,219,220],{},"  - Pada diagonal yang sama\n",[25,222,224],{"class":27,"line":223},35,[25,225,38],{"emptyLinePlaceholder":37},[25,227,229],{"class":27,"line":228},36,[25,230,77],{},[25,232,234],{"class":27,"line":233},37,[25,235,38],{"emptyLinePlaceholder":37},[25,237,239],{"class":27,"line":238},38,[25,240,241],{},"## Contoh Masalah: 4-Queen\n",[25,243,245],{"class":27,"line":244},39,[25,246,38],{"emptyLinePlaceholder":37},[25,248,250],{"class":27,"line":249},40,[25,251,252],{},"Salah satu solusi untuk **N=4**:\n",[254,255,256],"p",{},". Q . . . . . Q Q . . . . . Q .",[15,258,262],{"className":259,"code":260,"language":261,"meta":20,"style":20},"language-js shiki shiki-themes github-dark github-dark github-light","\nAda **2 solusi fundamental** untuk N=4 (tanpa rotasi dan refleksi).\n\n---\n\n## Pendekatan Penyelesaian: Backtracking\n\nLangkah-langkah:\n1. Tempatkan ratu **satu per satu** di **setiap kolom**.\n2. Coba semua baris di kolom saat ini.\n3. Untuk setiap posisi:\n   - ✅ Periksa apakah aman (tidak diserang ratu lain).\n   - Jika aman, lanjut ke kolom berikutnya.\n   - Jika tidak, **backtrack** (kembali ke langkah sebelumnya).\n\n### 💡 Optimalisasi\nSaat memeriksa posisi `(row, col)`:\n- Hanya perlu memeriksa ratu yang **sudah ditempatkan di kolom-kolom kiri**.\n\n---\n\n## Implementasi Python\n\n```python\ndef solve_n_queens(n):\n    def is_safe(board, row, col):\n        for i in range(col):\n            if board[row][i] == 1:\n                return False\n        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n            if board[i][j] == 1:\n                return False\n        for i, j in zip(range(row, n), range(col, -1, -1)):\n            if board[i][j] == 1:\n                return False\n        return True\n\n    def solve_util(board, col):\n        if col >= n:\n            solutions.append([row[:] for row in board])\n            return True\n        res = False\n        for i in range(n):\n            if is_safe(board, i, col):\n                board[i][col] = 1\n                res = solve_util(board, col + 1) or res\n                board[i][col] = 0\n        return res\n\n    solutions = []\n    board = [[0] * n for _ in range(n)]\n    solve_util(board, 0)\n    return solutions\n\n# Contoh\nn = 4\nsolutions = solve_n_queens(n)\nprint(f\"Jumlah solusi untuk {n}-Queen:\", len(solutions))\nfor sol in solutions:\n    for row in sol:\n        print(' '.join('Q' if cell else '.' for cell in row))\n    print()\n","js",[22,263,264,268,302,306,310,314,326,330,344,372,380,393,407,414,431,435,440,451,472,476,480,484,489,493,498,503,508,513,518,523,528,533,537,542,546,550,555,559,564,569,574,580,586,592,598,604,610,616,622,627,633,639,645,651,656,662,668,674,680,686,692,698],{"__ignoreMap":20},[25,265,266],{"class":27,"line":28},[25,267,38],{"emptyLinePlaceholder":37},[25,269,270,274,278,282,285,287,290,293,296,299],{"class":27,"line":34},[25,271,273],{"class":272},"suVJd","Ada ",[25,275,277],{"class":276},"sEiGg","**",[25,279,281],{"class":280},"sAPL1","2",[25,283,284],{"class":272}," solusi fundamental",[25,286,277],{"class":276},[25,288,289],{"class":272}," untuk ",[25,291,292],{"class":280},"N",[25,294,295],{"class":276},"=",[25,297,298],{"class":280},"4",[25,300,301],{"class":272}," (tanpa rotasi dan refleksi).\n",[25,303,304],{"class":27,"line":41},[25,305,38],{"emptyLinePlaceholder":37},[25,307,308],{"class":27,"line":47},[25,309,77],{"class":276},[25,311,312],{"class":27,"line":52},[25,313,38],{"emptyLinePlaceholder":37},[25,315,316,319,323],{"class":27,"line":58},[25,317,318],{"class":272},"## Pendekatan ",[25,320,322],{"class":321},"s9E-l","Penyelesaian",[25,324,325],{"class":272},": Backtracking\n",[25,327,328],{"class":27,"line":63},[25,329,38],{"emptyLinePlaceholder":37},[25,331,332,335,338,341],{"class":27,"line":69},[25,333,334],{"class":272},"Langkah",[25,336,337],{"class":276},"-",[25,339,340],{"class":321},"langkah",[25,342,343],{"class":272},":\n",[25,345,346,349,352,354,357,359,362,364,367,369],{"class":27,"line":74},[25,347,348],{"class":280},"1.",[25,350,351],{"class":272}," Tempatkan ratu ",[25,353,277],{"class":276},[25,355,356],{"class":272},"satu per satu",[25,358,277],{"class":276},[25,360,361],{"class":272}," di ",[25,363,277],{"class":276},[25,365,366],{"class":272},"setiap kolom",[25,368,277],{"class":276},[25,370,371],{"class":272},".\n",[25,373,374,377],{"class":27,"line":80},[25,375,376],{"class":280},"2.",[25,378,379],{"class":272}," Coba semua baris di kolom saat ini.\n",[25,381,382,385,388,391],{"class":27,"line":85},[25,383,384],{"class":280},"3.",[25,386,387],{"class":272}," Untuk setiap ",[25,389,390],{"class":321},"posisi",[25,392,343],{"class":272},[25,394,395,398,401,404],{"class":27,"line":91},[25,396,397],{"class":276},"   -",[25,399,400],{"class":272}," ✅ Periksa apakah ",[25,402,403],{"class":321},"aman",[25,405,406],{"class":272}," (tidak diserang ratu lain).\n",[25,408,409,411],{"class":27,"line":96},[25,410,397],{"class":276},[25,412,413],{"class":272}," Jika aman, lanjut ke kolom berikutnya.\n",[25,415,416,418,421,423,426,428],{"class":27,"line":102},[25,417,397],{"class":276},[25,419,420],{"class":272}," Jika tidak, ",[25,422,277],{"class":276},[25,424,425],{"class":272},"backtrack",[25,427,277],{"class":276},[25,429,430],{"class":272}," (kembali ke langkah sebelumnya).\n",[25,432,433],{"class":27,"line":108},[25,434,38],{"emptyLinePlaceholder":37},[25,436,437],{"class":27,"line":114},[25,438,439],{"class":272},"### 💡 Optimalisasi\n",[25,441,442,445,449],{"class":27,"line":120},[25,443,444],{"class":272},"Saat memeriksa posisi ",[25,446,448],{"class":447},"sYTnl","`(row, col)`",[25,450,343],{"class":272},[25,452,453,455,458,460,463,465,468,470],{"class":27,"line":126},[25,454,337],{"class":276},[25,456,457],{"class":272}," Hanya perlu memeriksa ratu yang ",[25,459,277],{"class":276},[25,461,462],{"class":272},"sudah ditempatkan di kolom",[25,464,337],{"class":276},[25,466,467],{"class":272},"kolom kiri",[25,469,277],{"class":276},[25,471,371],{"class":272},[25,473,474],{"class":27,"line":131},[25,475,38],{"emptyLinePlaceholder":37},[25,477,478],{"class":27,"line":136},[25,479,77],{"class":276},[25,481,482],{"class":27,"line":141},[25,483,38],{"emptyLinePlaceholder":37},[25,485,486],{"class":27,"line":147},[25,487,488],{"class":272},"## Implementasi Python\n",[25,490,491],{"class":27,"line":152},[25,492,38],{"emptyLinePlaceholder":37},[25,494,495],{"class":27,"line":158},[25,496,497],{"class":447},"```python\n",[25,499,500],{"class":27,"line":164},[25,501,502],{"class":447},"def solve_n_queens(n):\n",[25,504,505],{"class":27,"line":170},[25,506,507],{"class":447},"    def is_safe(board, row, col):\n",[25,509,510],{"class":27,"line":176},[25,511,512],{"class":447},"        for i in range(col):\n",[25,514,515],{"class":27,"line":182},[25,516,517],{"class":447},"            if board[row][i] == 1:\n",[25,519,520],{"class":27,"line":187},[25,521,522],{"class":447},"                return False\n",[25,524,525],{"class":27,"line":193},[25,526,527],{"class":447},"        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n",[25,529,530],{"class":27,"line":199},[25,531,532],{"class":447},"            if board[i][j] == 1:\n",[25,534,535],{"class":27,"line":205},[25,536,522],{"class":447},[25,538,539],{"class":27,"line":211},[25,540,541],{"class":447},"        for i, j in zip(range(row, n), range(col, -1, -1)):\n",[25,543,544],{"class":27,"line":217},[25,545,532],{"class":447},[25,547,548],{"class":27,"line":223},[25,549,522],{"class":447},[25,551,552],{"class":27,"line":228},[25,553,554],{"class":447},"        return True\n",[25,556,557],{"class":27,"line":233},[25,558,38],{"emptyLinePlaceholder":37},[25,560,561],{"class":27,"line":238},[25,562,563],{"class":447},"    def solve_util(board, col):\n",[25,565,566],{"class":27,"line":244},[25,567,568],{"class":447},"        if col >= n:\n",[25,570,571],{"class":27,"line":249},[25,572,573],{"class":447},"            solutions.append([row[:] for row in board])\n",[25,575,577],{"class":27,"line":576},41,[25,578,579],{"class":447},"            return True\n",[25,581,583],{"class":27,"line":582},42,[25,584,585],{"class":447},"        res = False\n",[25,587,589],{"class":27,"line":588},43,[25,590,591],{"class":447},"        for i in range(n):\n",[25,593,595],{"class":27,"line":594},44,[25,596,597],{"class":447},"            if is_safe(board, i, col):\n",[25,599,601],{"class":27,"line":600},45,[25,602,603],{"class":447},"                board[i][col] = 1\n",[25,605,607],{"class":27,"line":606},46,[25,608,609],{"class":447},"                res = solve_util(board, col + 1) or res\n",[25,611,613],{"class":27,"line":612},47,[25,614,615],{"class":447},"                board[i][col] = 0\n",[25,617,619],{"class":27,"line":618},48,[25,620,621],{"class":447},"        return res\n",[25,623,625],{"class":27,"line":624},49,[25,626,38],{"emptyLinePlaceholder":37},[25,628,630],{"class":27,"line":629},50,[25,631,632],{"class":447},"    solutions = []\n",[25,634,636],{"class":27,"line":635},51,[25,637,638],{"class":447},"    board = [[0] * n for _ in range(n)]\n",[25,640,642],{"class":27,"line":641},52,[25,643,644],{"class":447},"    solve_util(board, 0)\n",[25,646,648],{"class":27,"line":647},53,[25,649,650],{"class":447},"    return solutions\n",[25,652,654],{"class":27,"line":653},54,[25,655,38],{"emptyLinePlaceholder":37},[25,657,659],{"class":27,"line":658},55,[25,660,661],{"class":447},"# Contoh\n",[25,663,665],{"class":27,"line":664},56,[25,666,667],{"class":447},"n = 4\n",[25,669,671],{"class":27,"line":670},57,[25,672,673],{"class":447},"solutions = solve_n_queens(n)\n",[25,675,677],{"class":27,"line":676},58,[25,678,679],{"class":447},"print(f\"Jumlah solusi untuk {n}-Queen:\", len(solutions))\n",[25,681,683],{"class":27,"line":682},59,[25,684,685],{"class":447},"for sol in solutions:\n",[25,687,689],{"class":27,"line":688},60,[25,690,691],{"class":447},"    for row in sol:\n",[25,693,695],{"class":27,"line":694},61,[25,696,697],{"class":447},"        print(' '.join('Q' if cell else '.' for cell in row))\n",[25,699,701],{"class":27,"line":700},62,[25,702,703],{"class":447},"    print()\n",[705,706,708],"h2",{"id":707},"implementasi-javascript","Implementasi JavaScript",[15,710,714],{"className":711,"code":712,"language":713,"meta":20,"style":20},"language-javascript shiki shiki-themes github-dark github-dark github-light","function solveNQueens(n) {\n    const solutions = [];\n\n    function isSafe(board, row, col) {\n        for (let i = 0; i \u003C col; i++) {\n            if (board[row][i] === 1) return false;\n        }\n        for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n            if (board[i][j] === 1) return false;\n        }\n        for (let i = row, j = col; i \u003C n && j >= 0; i++, j--) {\n            if (board[i][j] === 1) return false;\n        }\n        return true;\n    }\n\n    function solveUtil(board, col) {\n        if (col === n) {\n            solutions.push(board.map(row => [...row]));\n            return;\n        }\n        for (let i = 0; i \u003C n; i++) {\n            if (isSafe(board, i, col)) {\n                board[i][col] = 1;\n                solveUtil(board, col + 1);\n                board[i][col] = 0;\n            }\n        }\n    }\n\n    const board = Array(n).fill().map(() => Array(n).fill(0));\n    solveUtil(board, 0);\n    return solutions;\n}\n\n// Contoh\nconst solutions = solveNQueens(4);\nconsole.log(\"Jumlah solusi:\", solutions.length);\nsolutions.forEach((sol, idx) => {\n    console.log(`Solusi ${idx + 1}:`);\n    console.log(sol.map(row => row.map(c => c ? \"Q\" : \".\").join(\" \")).join(\"\\n\"));\n});\n","javascript",[22,715,716,721,726,730,735,740,745,750,755,760,764,769,773,777,782,787,791,796,801,806,811,815,820,825,830,835,840,845,849,853,857,862,867,872,877,881,886,891,896,901,906,911],{"__ignoreMap":20},[25,717,718],{"class":27,"line":28},[25,719,720],{},"function solveNQueens(n) {\n",[25,722,723],{"class":27,"line":34},[25,724,725],{},"    const solutions = [];\n",[25,727,728],{"class":27,"line":41},[25,729,38],{"emptyLinePlaceholder":37},[25,731,732],{"class":27,"line":47},[25,733,734],{},"    function isSafe(board, row, col) {\n",[25,736,737],{"class":27,"line":52},[25,738,739],{},"        for (let i = 0; i \u003C col; i++) {\n",[25,741,742],{"class":27,"line":58},[25,743,744],{},"            if (board[row][i] === 1) return false;\n",[25,746,747],{"class":27,"line":63},[25,748,749],{},"        }\n",[25,751,752],{"class":27,"line":69},[25,753,754],{},"        for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n",[25,756,757],{"class":27,"line":74},[25,758,759],{},"            if (board[i][j] === 1) return false;\n",[25,761,762],{"class":27,"line":80},[25,763,749],{},[25,765,766],{"class":27,"line":85},[25,767,768],{},"        for (let i = row, j = col; i \u003C n && j >= 0; i++, j--) {\n",[25,770,771],{"class":27,"line":91},[25,772,759],{},[25,774,775],{"class":27,"line":96},[25,776,749],{},[25,778,779],{"class":27,"line":102},[25,780,781],{},"        return true;\n",[25,783,784],{"class":27,"line":108},[25,785,786],{},"    }\n",[25,788,789],{"class":27,"line":114},[25,790,38],{"emptyLinePlaceholder":37},[25,792,793],{"class":27,"line":120},[25,794,795],{},"    function solveUtil(board, col) {\n",[25,797,798],{"class":27,"line":126},[25,799,800],{},"        if (col === n) {\n",[25,802,803],{"class":27,"line":131},[25,804,805],{},"            solutions.push(board.map(row => [...row]));\n",[25,807,808],{"class":27,"line":136},[25,809,810],{},"            return;\n",[25,812,813],{"class":27,"line":141},[25,814,749],{},[25,816,817],{"class":27,"line":147},[25,818,819],{},"        for (let i = 0; i \u003C n; i++) {\n",[25,821,822],{"class":27,"line":152},[25,823,824],{},"            if (isSafe(board, i, col)) {\n",[25,826,827],{"class":27,"line":158},[25,828,829],{},"                board[i][col] = 1;\n",[25,831,832],{"class":27,"line":164},[25,833,834],{},"                solveUtil(board, col + 1);\n",[25,836,837],{"class":27,"line":170},[25,838,839],{},"                board[i][col] = 0;\n",[25,841,842],{"class":27,"line":176},[25,843,844],{},"            }\n",[25,846,847],{"class":27,"line":182},[25,848,749],{},[25,850,851],{"class":27,"line":187},[25,852,786],{},[25,854,855],{"class":27,"line":193},[25,856,38],{"emptyLinePlaceholder":37},[25,858,859],{"class":27,"line":199},[25,860,861],{},"    const board = Array(n).fill().map(() => Array(n).fill(0));\n",[25,863,864],{"class":27,"line":205},[25,865,866],{},"    solveUtil(board, 0);\n",[25,868,869],{"class":27,"line":211},[25,870,871],{},"    return solutions;\n",[25,873,874],{"class":27,"line":217},[25,875,876],{},"}\n",[25,878,879],{"class":27,"line":223},[25,880,38],{"emptyLinePlaceholder":37},[25,882,883],{"class":27,"line":228},[25,884,885],{},"// Contoh\n",[25,887,888],{"class":27,"line":233},[25,889,890],{},"const solutions = solveNQueens(4);\n",[25,892,893],{"class":27,"line":238},[25,894,895],{},"console.log(\"Jumlah solusi:\", solutions.length);\n",[25,897,898],{"class":27,"line":244},[25,899,900],{},"solutions.forEach((sol, idx) => {\n",[25,902,903],{"class":27,"line":249},[25,904,905],{},"    console.log(`Solusi ${idx + 1}:`);\n",[25,907,908],{"class":27,"line":576},[25,909,910],{},"    console.log(sol.map(row => row.map(c => c ? \"Q\" : \".\").join(\" \")).join(\"\\n\"));\n",[25,912,913],{"class":27,"line":582},[25,914,915],{},"});\n",[705,917,919],{"id":918},"kompleksitas-algoritma","Kompleksitas Algoritma",[921,922,924],"h3",{"id":923},"waktu","⏱ Waktu:",[926,927,928,936],"ul",{},[929,930,931,935],"li",{},[932,933,934],"strong",{},"O(N!)"," pada kasus terburuk (karena percobaan kombinasi posisi)",[929,937,938],{},"Dapat dioptimalkan menggunakan bitmask dan pruning",[921,940,942],{"id":941},"ruang","🧠 Ruang:",[926,944,945,951],{},[929,946,947,950],{},[932,948,949],{},"O(N²)"," untuk menyimpan papan",[929,952,953,954,957],{},"Dapat dikurangi menjadi ",[932,955,956],{},"O(N)"," hanya dengan array posisi per kolom",[705,959,961],{"id":960},"optimisasi-variasi","Optimisasi & Variasi",[921,963,965],{"id":964},"optimisasi","🔧 Optimisasi:",[926,967,968,974,980],{},[929,969,970,973],{},[932,971,972],{},"Bitmasking",": Representasi baris, kolom, dan diagonal dalam bentuk bit",[929,975,976,979],{},[932,977,978],{},"Symmetry Breaking",": Kurangi solusi duplikat dengan membatasi pilihan awal",[929,981,982,985],{},[932,983,984],{},"Heuristik MRV (Minimum Remaining Value)",": Prioritaskan baris dengan pilihan terbatas",[921,987,989],{"id":988},"variasi","🔁 Variasi:",[926,991,992,1002,1008],{},[929,993,994,997,998,1001],{},[932,995,996],{},"N-Bishop"," atau ",[932,999,1000],{},"N-Rook",": Hanya pergerakan tertentu yang diperbolehkan",[929,1003,1004,1007],{},[932,1005,1006],{},"Superqueen",": Gabungan ratu dan kuda",[929,1009,1010,1013],{},[932,1011,1012],{},"3D N-Queen",": Penempatan ratu di papan kubus 3D",[705,1015,1017],{"id":1016},"aplikasi-dunia-nyata","Aplikasi Dunia Nyata",[926,1019,1020,1027,1034,1041],{},[929,1021,1022,1023,1026],{},"✈️ ",[932,1024,1025],{},"Penjadwalan bandara",": Menempatkan pesawat agar tidak terjadi konflik landasan",[929,1028,1029,1030,1033],{},"🔍 ",[932,1031,1032],{},"Constraint satisfaction problems (CSP)",": Dalam AI dan optimasi",[929,1035,1036,1037,1040],{},"🔩 ",[932,1038,1039],{},"Pengujian VLSI",": Untuk merancang sirkuit terintegrasi",[929,1042,1043,1044,1047],{},"🧮 ",[932,1045,1046],{},"Pengajaran algoritma",": Materi dasar dalam pemrograman kompetitif dan rekursi",[705,1049,1051],{"id":1050},"kesimpulan","Kesimpulan",[254,1053,1054,1055,1058,1059,1062,1063,1066],{},"Masalah ",[932,1056,1057],{},"N-Queen"," adalah contoh klasik yang indah dari ",[932,1060,1061],{},"backtracking"," dan ",[932,1064,1065],{},"constraint solving",". Ia sederhana untuk dipahami, namun cukup kompleks untuk dijadikan latihan pemrograman yang menantang. Banyak algoritma lanjutan lahir dari pendekatan dasar yang digunakan dalam menyelesaikan N-Queen.",[1068,1069,1070],"blockquote",{},[254,1071,1072,1073,1076],{},"🧠 ",[932,1074,1075],{},"Tip",": Latih dengan N kecil (mis. N=4 atau 5) sebelum mencoba optimisasi untuk N besar (N > 10).",[1078,1079,1080],"style",{},"html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html pre.shiki code .suVJd, html code.shiki .suVJd{--shiki-dark:#E1E4E8;--shiki-default:#E1E4E8;--shiki-light:#24292E}html pre.shiki code .sEiGg, html code.shiki .sEiGg{--shiki-dark:#F97583;--shiki-default:#F97583;--shiki-light:#D73A49}html pre.shiki code .sAPL1, html code.shiki .sAPL1{--shiki-dark:#79B8FF;--shiki-default:#79B8FF;--shiki-light:#005CC5}html pre.shiki code .s9E-l, html code.shiki .s9E-l{--shiki-dark:#B392F0;--shiki-default:#B392F0;--shiki-light:#6F42C1}html pre.shiki code .sYTnl, html code.shiki .sYTnl{--shiki-dark:#9ECBFF;--shiki-default:#9ECBFF;--shiki-light:#032F62}",{"title":20,"searchDepth":34,"depth":34,"links":1082},[1083,1084,1088,1092,1093],{"id":707,"depth":34,"text":708},{"id":918,"depth":34,"text":919,"children":1085},[1086,1087],{"id":923,"depth":41,"text":924},{"id":941,"depth":41,"text":942},{"id":960,"depth":34,"text":961,"children":1089},[1090,1091],{"id":964,"depth":41,"text":965},{"id":988,"depth":41,"text":989},{"id":1016,"depth":34,"text":1017},{"id":1050,"depth":34,"text":1051},null,"Teka-teki backtracking klasik: Menempatkan N ratu pada papan catur N×N tanpa saling menyerang","md",{"script":1098},[1099],{"type":1100,"key":1101,"data-nuxt-schema-org":37,"nodes":1102},"application/ld+json","schema-org-graph",[1103],{"_resolver":1104},"webPage","/articles/7.jpeg",{},{"props":1108},{},"/en/articles/n-queens-problem",{"_resolver":1104},{"title":5,"description":1095},{"loc":1109,"videos":1113,"images":1114,"lastmod":1115},[],[],"2025-06-13T00:00:00.000Z","en/articles/n-queens-problem",[],"29ZSQLIhVKDAMrF-5cXIuxFZo2q_lJjVg1ZfcCUbXes",1750341170141]