[{"data":1,"prerenderedAt":1225},["ShallowReactive",2],{"/en/articles/n-queens-problem":3},{"id":4,"title":5,"body":6,"date":1201,"description":1202,"extension":19,"head":1203,"image":1211,"meta":1212,"navigation":38,"ogImage":1213,"path":1215,"readingTime":1201,"robots":1201,"schemaOrg":1216,"seo":1217,"sitemap":1218,"stem":1222,"tags":1223,"__hash__":1224},"articles_en/en/articles/n-queens-problem.md","Masalah N-Queen",{"type":7,"value":8,"toc":1188},"minimal",[9,14,376,380,754,759,1023,1027,1032,1046,1050,1065,1069,1073,1093,1097,1121,1125,1155,1159,1174,1184],[10,11,13],"h1",{"id":12},"n-queens-problem","N QUEENS PROBLEM",[15,16,21],"pre",{"className":17,"code":18,"language":19,"meta":20,"style":20},"language-md shiki shiki-themes github-dark github-dark github-light","# Apa itu Masalah N-Queen?\n\n**Masalah N-Queen** adalah sebuah teka-teki klasik dalam ilmu komputer yang menanyakan:\n\n> \"Bagaimana cara menempatkan **N ratu** pada papan catur **N×N** sehingga **tidak ada dua ratu yang saling menyerang**?\"\n\nArtinya, tidak ada dua ratu yang berada dalam **baris**, **kolom**, atau **diagonal** yang sama.\n\n---\n\n## Sejarah Singkat\n\nMasalah ini pertama kali diperkenalkan oleh **Max Bezzel** pada tahun **1848** dan telah menjadi:\n- 🔄 Contoh klasik untuk **algoritma backtracking**\n- 🧠 Pertanyaan umum dalam **wawancara teknis**\n- 🎓 Materi pengajaran **rekursi dan constraint solving**\n- 🔬 Topik riset dalam **AI dan optimisasi kombinatorial**\n\n---\n\n## Aturan & Kendala\n\n### 🔁 Pergerakan Ratu Catur\nRatu dapat menyerang:\n- Secara **horizontal** (baris)\n- Secara **vertikal** (kolom)\n- Secara **diagonal** (↘ dan ↙)\n\n### ✅ Syarat Solusi:\n- Tepat **N ratu** ditempatkan di papan **N×N**\n- Tidak ada dua ratu yang berada:\n  - Pada baris yang sama\n  - Pada kolom yang sama\n  - Pada diagonal yang sama\n\n---\n\n## Contoh Masalah: 4-Queen\n\nSalah satu solusi untuk **N=4**:\n\n","md","",[22,23,24,33,40,51,56,81,86,110,115,121,126,132,137,155,168,179,190,201,206,211,216,222,227,233,239,253,266,278,283,289,305,313,322,330,338,343,348,353,359,364],"code",{"__ignoreMap":20},[25,26,29],"span",{"class":27,"line":28},"line",1,[25,30,32],{"class":31},"sXvaJ","# Apa itu Masalah N-Queen?\n",[25,34,36],{"class":27,"line":35},2,[25,37,39],{"emptyLinePlaceholder":38},true,"\n",[25,41,43,47],{"class":27,"line":42},3,[25,44,46],{"class":45},"s9_AW","**Masalah N-Queen**",[25,48,50],{"class":49},"suVJd"," adalah sebuah teka-teki klasik dalam ilmu komputer yang menanyakan:\n",[25,52,54],{"class":27,"line":53},4,[25,55,39],{"emptyLinePlaceholder":38},[25,57,59,63,66,69,72,75,78],{"class":27,"line":58},5,[25,60,62],{"class":61},"scWFE","> \"Bagaimana cara menempatkan ",[25,64,65],{"class":45},"**N ratu**",[25,67,68],{"class":61}," pada papan catur ",[25,70,71],{"class":45},"**N×N**",[25,73,74],{"class":61}," sehingga ",[25,76,77],{"class":45},"**tidak ada dua ratu yang saling menyerang**",[25,79,80],{"class":61},"?\"\n",[25,82,84],{"class":27,"line":83},6,[25,85,39],{"emptyLinePlaceholder":38},[25,87,89,92,95,98,101,104,107],{"class":27,"line":88},7,[25,90,91],{"class":49},"Artinya, tidak ada dua ratu yang berada dalam ",[25,93,94],{"class":45},"**baris**",[25,96,97],{"class":49},", ",[25,99,100],{"class":45},"**kolom**",[25,102,103],{"class":49},", atau ",[25,105,106],{"class":45},"**diagonal**",[25,108,109],{"class":49}," yang sama.\n",[25,111,113],{"class":27,"line":112},8,[25,114,39],{"emptyLinePlaceholder":38},[25,116,118],{"class":27,"line":117},9,[25,119,120],{"class":31},"---\n",[25,122,124],{"class":27,"line":123},10,[25,125,39],{"emptyLinePlaceholder":38},[25,127,129],{"class":27,"line":128},11,[25,130,131],{"class":31},"## Sejarah Singkat\n",[25,133,135],{"class":27,"line":134},12,[25,136,39],{"emptyLinePlaceholder":38},[25,138,140,143,146,149,152],{"class":27,"line":139},13,[25,141,142],{"class":49},"Masalah ini pertama kali diperkenalkan oleh ",[25,144,145],{"class":45},"**Max Bezzel**",[25,147,148],{"class":49}," pada tahun ",[25,150,151],{"class":45},"**1848**",[25,153,154],{"class":49}," dan telah menjadi:\n",[25,156,158,162,165],{"class":27,"line":157},14,[25,159,161],{"class":160},"s1uPE","-",[25,163,164],{"class":49}," 🔄 Contoh klasik untuk ",[25,166,167],{"class":45},"**algoritma backtracking**\n",[25,169,171,173,176],{"class":27,"line":170},15,[25,172,161],{"class":160},[25,174,175],{"class":49}," 🧠 Pertanyaan umum dalam ",[25,177,178],{"class":45},"**wawancara teknis**\n",[25,180,182,184,187],{"class":27,"line":181},16,[25,183,161],{"class":160},[25,185,186],{"class":49}," 🎓 Materi pengajaran ",[25,188,189],{"class":45},"**rekursi dan constraint solving**\n",[25,191,193,195,198],{"class":27,"line":192},17,[25,194,161],{"class":160},[25,196,197],{"class":49}," 🔬 Topik riset dalam ",[25,199,200],{"class":45},"**AI dan optimisasi kombinatorial**\n",[25,202,204],{"class":27,"line":203},18,[25,205,39],{"emptyLinePlaceholder":38},[25,207,209],{"class":27,"line":208},19,[25,210,120],{"class":31},[25,212,214],{"class":27,"line":213},20,[25,215,39],{"emptyLinePlaceholder":38},[25,217,219],{"class":27,"line":218},21,[25,220,221],{"class":31},"## Aturan & Kendala\n",[25,223,225],{"class":27,"line":224},22,[25,226,39],{"emptyLinePlaceholder":38},[25,228,230],{"class":27,"line":229},23,[25,231,232],{"class":31},"### 🔁 Pergerakan Ratu Catur\n",[25,234,236],{"class":27,"line":235},24,[25,237,238],{"class":49},"Ratu dapat menyerang:\n",[25,240,242,244,247,250],{"class":27,"line":241},25,[25,243,161],{"class":160},[25,245,246],{"class":49}," Secara ",[25,248,249],{"class":45},"**horizontal**",[25,251,252],{"class":49}," (baris)\n",[25,254,256,258,260,263],{"class":27,"line":255},26,[25,257,161],{"class":160},[25,259,246],{"class":49},[25,261,262],{"class":45},"**vertikal**",[25,264,265],{"class":49}," (kolom)\n",[25,267,269,271,273,275],{"class":27,"line":268},27,[25,270,161],{"class":160},[25,272,246],{"class":49},[25,274,106],{"class":45},[25,276,277],{"class":49}," (↘ dan ↙)\n",[25,279,281],{"class":27,"line":280},28,[25,282,39],{"emptyLinePlaceholder":38},[25,284,286],{"class":27,"line":285},29,[25,287,288],{"class":31},"### ✅ Syarat Solusi:\n",[25,290,292,294,297,299,302],{"class":27,"line":291},30,[25,293,161],{"class":160},[25,295,296],{"class":49}," Tepat ",[25,298,65],{"class":45},[25,300,301],{"class":49}," ditempatkan di papan ",[25,303,304],{"class":45},"**N×N**\n",[25,306,308,310],{"class":27,"line":307},31,[25,309,161],{"class":160},[25,311,312],{"class":49}," Tidak ada dua ratu yang berada:\n",[25,314,316,319],{"class":27,"line":315},32,[25,317,318],{"class":160},"  -",[25,320,321],{"class":49}," Pada baris yang sama\n",[25,323,325,327],{"class":27,"line":324},33,[25,326,318],{"class":160},[25,328,329],{"class":49}," Pada kolom yang sama\n",[25,331,333,335],{"class":27,"line":332},34,[25,334,318],{"class":160},[25,336,337],{"class":49}," Pada diagonal yang sama\n",[25,339,341],{"class":27,"line":340},35,[25,342,39],{"emptyLinePlaceholder":38},[25,344,346],{"class":27,"line":345},36,[25,347,120],{"class":31},[25,349,351],{"class":27,"line":350},37,[25,352,39],{"emptyLinePlaceholder":38},[25,354,356],{"class":27,"line":355},38,[25,357,358],{"class":31},"## Contoh Masalah: 4-Queen\n",[25,360,362],{"class":27,"line":361},39,[25,363,39],{"emptyLinePlaceholder":38},[25,365,367,370,373],{"class":27,"line":366},40,[25,368,369],{"class":49},"Salah satu solusi untuk ",[25,371,372],{"class":45},"**N=4**",[25,374,375],{"class":49},":\n",[377,378,379],"p",{},". Q . . . . . Q Q . . . . . Q .",[15,381,383],{"className":17,"code":382,"language":19,"meta":20,"style":20},"\nAda **2 solusi fundamental** untuk N=4 (tanpa rotasi dan refleksi).\n\n---\n\n## Pendekatan Penyelesaian: Backtracking\n\nLangkah-langkah:\n1. Tempatkan ratu **satu per satu** di **setiap kolom**.\n2. Coba semua baris di kolom saat ini.\n3. Untuk setiap posisi:\n   - ✅ Periksa apakah aman (tidak diserang ratu lain).\n   - Jika aman, lanjut ke kolom berikutnya.\n   - Jika tidak, **backtrack** (kembali ke langkah sebelumnya).\n\n### 💡 Optimalisasi\nSaat memeriksa posisi `(row, col)`:\n- Hanya perlu memeriksa ratu yang **sudah ditempatkan di kolom-kolom kiri**.\n\n---\n\n## Implementasi Python\n\n```python\ndef solve_n_queens(n):\n    def is_safe(board, row, col):\n        for i in range(col):\n            if board[row][i] == 1:\n                return False\n        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n            if board[i][j] == 1:\n                return False\n        for i, j in zip(range(row, n), range(col, -1, -1)):\n            if board[i][j] == 1:\n                return False\n        return True\n\n    def solve_util(board, col):\n        if col >= n:\n            solutions.append([row[:] for row in board])\n            return True\n        res = False\n        for i in range(n):\n            if is_safe(board, i, col):\n                board[i][col] = 1\n                res = solve_util(board, col + 1) or res\n                board[i][col] = 0\n        return res\n\n    solutions = []\n    board = [[0] * n for _ in range(n)]\n    solve_util(board, 0)\n    return solutions\n\n# Contoh\nn = 4\nsolutions = solve_n_queens(n)\nprint(f\"Jumlah solusi untuk {n}-Queen:\", len(solutions))\nfor sol in solutions:\n    for row in sol:\n        print(' '.join('Q' if cell else '.' for cell in row))\n    print()\n",[22,384,385,389,400,404,408,412,417,421,426,446,454,462,470,477,490,494,499,510,522,526,530,534,539,543,548,553,558,563,568,573,578,583,587,592,596,600,605,609,614,619,624,630,636,642,648,654,660,666,672,677,683,689,695,701,706,712,718,724,730,736,742,748],{"__ignoreMap":20},[25,386,387],{"class":27,"line":28},[25,388,39],{"emptyLinePlaceholder":38},[25,390,391,394,397],{"class":27,"line":35},[25,392,393],{"class":49},"Ada ",[25,395,396],{"class":45},"**2 solusi fundamental**",[25,398,399],{"class":49}," untuk N=4 (tanpa rotasi dan refleksi).\n",[25,401,402],{"class":27,"line":42},[25,403,39],{"emptyLinePlaceholder":38},[25,405,406],{"class":27,"line":53},[25,407,120],{"class":31},[25,409,410],{"class":27,"line":58},[25,411,39],{"emptyLinePlaceholder":38},[25,413,414],{"class":27,"line":83},[25,415,416],{"class":31},"## Pendekatan Penyelesaian: Backtracking\n",[25,418,419],{"class":27,"line":88},[25,420,39],{"emptyLinePlaceholder":38},[25,422,423],{"class":27,"line":112},[25,424,425],{"class":49},"Langkah-langkah:\n",[25,427,428,431,434,437,440,443],{"class":27,"line":117},[25,429,430],{"class":160},"1.",[25,432,433],{"class":49}," Tempatkan ratu ",[25,435,436],{"class":45},"**satu per satu**",[25,438,439],{"class":49}," di ",[25,441,442],{"class":45},"**setiap kolom**",[25,444,445],{"class":49},".\n",[25,447,448,451],{"class":27,"line":123},[25,449,450],{"class":160},"2.",[25,452,453],{"class":49}," Coba semua baris di kolom saat ini.\n",[25,455,456,459],{"class":27,"line":128},[25,457,458],{"class":160},"3.",[25,460,461],{"class":49}," Untuk setiap posisi:\n",[25,463,464,467],{"class":27,"line":134},[25,465,466],{"class":160},"   -",[25,468,469],{"class":49}," ✅ Periksa apakah aman (tidak diserang ratu lain).\n",[25,471,472,474],{"class":27,"line":139},[25,473,466],{"class":160},[25,475,476],{"class":49}," Jika aman, lanjut ke kolom berikutnya.\n",[25,478,479,481,484,487],{"class":27,"line":157},[25,480,466],{"class":160},[25,482,483],{"class":49}," Jika tidak, ",[25,485,486],{"class":45},"**backtrack**",[25,488,489],{"class":49}," (kembali ke langkah sebelumnya).\n",[25,491,492],{"class":27,"line":170},[25,493,39],{"emptyLinePlaceholder":38},[25,495,496],{"class":27,"line":181},[25,497,498],{"class":31},"### 💡 Optimalisasi\n",[25,500,501,504,508],{"class":27,"line":192},[25,502,503],{"class":49},"Saat memeriksa posisi ",[25,505,507],{"class":506},"sAPL1","`(row, col)`",[25,509,375],{"class":49},[25,511,512,514,517,520],{"class":27,"line":203},[25,513,161],{"class":160},[25,515,516],{"class":49}," Hanya perlu memeriksa ratu yang ",[25,518,519],{"class":45},"**sudah ditempatkan di kolom-kolom kiri**",[25,521,445],{"class":49},[25,523,524],{"class":27,"line":208},[25,525,39],{"emptyLinePlaceholder":38},[25,527,528],{"class":27,"line":213},[25,529,120],{"class":31},[25,531,532],{"class":27,"line":218},[25,533,39],{"emptyLinePlaceholder":38},[25,535,536],{"class":27,"line":224},[25,537,538],{"class":31},"## Implementasi Python\n",[25,540,541],{"class":27,"line":229},[25,542,39],{"emptyLinePlaceholder":38},[25,544,545],{"class":27,"line":235},[25,546,547],{"class":49},"```python\n",[25,549,550],{"class":27,"line":241},[25,551,552],{"class":49},"def solve_n_queens(n):\n",[25,554,555],{"class":27,"line":255},[25,556,557],{"class":49},"    def is_safe(board, row, col):\n",[25,559,560],{"class":27,"line":268},[25,561,562],{"class":49},"        for i in range(col):\n",[25,564,565],{"class":27,"line":280},[25,566,567],{"class":49},"            if board[row][i] == 1:\n",[25,569,570],{"class":27,"line":285},[25,571,572],{"class":49},"                return False\n",[25,574,575],{"class":27,"line":291},[25,576,577],{"class":49},"        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n",[25,579,580],{"class":27,"line":307},[25,581,582],{"class":49},"            if board[i][j] == 1:\n",[25,584,585],{"class":27,"line":315},[25,586,572],{"class":49},[25,588,589],{"class":27,"line":324},[25,590,591],{"class":49},"        for i, j in zip(range(row, n), range(col, -1, -1)):\n",[25,593,594],{"class":27,"line":332},[25,595,582],{"class":49},[25,597,598],{"class":27,"line":340},[25,599,572],{"class":49},[25,601,602],{"class":27,"line":345},[25,603,604],{"class":49},"        return True\n",[25,606,607],{"class":27,"line":350},[25,608,39],{"emptyLinePlaceholder":38},[25,610,611],{"class":27,"line":355},[25,612,613],{"class":49},"    def solve_util(board, col):\n",[25,615,616],{"class":27,"line":361},[25,617,618],{"class":49},"        if col >= n:\n",[25,620,621],{"class":27,"line":366},[25,622,623],{"class":49},"            solutions.append([row[:] for row in board])\n",[25,625,627],{"class":27,"line":626},41,[25,628,629],{"class":49},"            return True\n",[25,631,633],{"class":27,"line":632},42,[25,634,635],{"class":49},"        res = False\n",[25,637,639],{"class":27,"line":638},43,[25,640,641],{"class":49},"        for i in range(n):\n",[25,643,645],{"class":27,"line":644},44,[25,646,647],{"class":49},"            if is_safe(board, i, col):\n",[25,649,651],{"class":27,"line":650},45,[25,652,653],{"class":49},"                board[i][col] = 1\n",[25,655,657],{"class":27,"line":656},46,[25,658,659],{"class":49},"                res = solve_util(board, col + 1) or res\n",[25,661,663],{"class":27,"line":662},47,[25,664,665],{"class":49},"                board[i][col] = 0\n",[25,667,669],{"class":27,"line":668},48,[25,670,671],{"class":49},"        return res\n",[25,673,675],{"class":27,"line":674},49,[25,676,39],{"emptyLinePlaceholder":38},[25,678,680],{"class":27,"line":679},50,[25,681,682],{"class":49},"    solutions = []\n",[25,684,686],{"class":27,"line":685},51,[25,687,688],{"class":49},"    board = [[0] * n for _ in range(n)]\n",[25,690,692],{"class":27,"line":691},52,[25,693,694],{"class":49},"    solve_util(board, 0)\n",[25,696,698],{"class":27,"line":697},53,[25,699,700],{"class":49},"    return solutions\n",[25,702,704],{"class":27,"line":703},54,[25,705,39],{"emptyLinePlaceholder":38},[25,707,709],{"class":27,"line":708},55,[25,710,711],{"class":49},"# Contoh\n",[25,713,715],{"class":27,"line":714},56,[25,716,717],{"class":49},"n = 4\n",[25,719,721],{"class":27,"line":720},57,[25,722,723],{"class":49},"solutions = solve_n_queens(n)\n",[25,725,727],{"class":27,"line":726},58,[25,728,729],{"class":49},"print(f\"Jumlah solusi untuk {n}-Queen:\", len(solutions))\n",[25,731,733],{"class":27,"line":732},59,[25,734,735],{"class":49},"for sol in solutions:\n",[25,737,739],{"class":27,"line":738},60,[25,740,741],{"class":49},"    for row in sol:\n",[25,743,745],{"class":27,"line":744},61,[25,746,747],{"class":49},"        print(' '.join('Q' if cell else '.' for cell in row))\n",[25,749,751],{"class":27,"line":750},62,[25,752,753],{"class":49},"    print()\n",[755,756,758],"h2",{"id":757},"implementasi-javascript","Implementasi JavaScript",[15,760,762],{"className":17,"code":761,"language":19,"meta":20,"style":20},"function solveNQueens(n) {\n    const solutions = [];\n\n    function isSafe(board, row, col) {\n        for (let i = 0; i \u003C col; i++) {\n            if (board[row][i] === 1) return false;\n        }\n        for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n            if (board[i][j] === 1) return false;\n        }\n        for (let i = row, j = col; i \u003C n && j >= 0; i++, j--) {\n            if (board[i][j] === 1) return false;\n        }\n        return true;\n    }\n\n    function solveUtil(board, col) {\n        if (col === n) {\n            solutions.push(board.map(row => [...row]));\n            return;\n        }\n        for (let i = 0; i \u003C n; i++) {\n            if (isSafe(board, i, col)) {\n                board[i][col] = 1;\n                solveUtil(board, col + 1);\n                board[i][col] = 0;\n            }\n        }\n    }\n\n    const board = Array(n).fill().map(() => Array(n).fill(0));\n    solveUtil(board, 0);\n    return solutions;\n}\n\n// Contoh\nconst solutions = solveNQueens(4);\nconsole.log(\"Jumlah solusi:\", solutions.length);\nsolutions.forEach((sol, idx) => {\n    console.log(`Solusi ${idx + 1}:`);\n    console.log(sol.map(row => row.map(c => c ? \"Q\" : \".\").join(\" \")).join(\"\\n\"));\n});\n",[22,763,764,769,774,778,783,788,806,811,816,829,833,838,850,854,859,864,868,873,878,889,894,898,903,908,923,928,941,946,950,954,958,963,968,973,978,982,987,992,997,1002,1013,1018],{"__ignoreMap":20},[25,765,766],{"class":27,"line":28},[25,767,768],{"class":49},"function solveNQueens(n) {\n",[25,770,771],{"class":27,"line":35},[25,772,773],{"class":49},"    const solutions = [];\n",[25,775,776],{"class":27,"line":42},[25,777,39],{"emptyLinePlaceholder":38},[25,779,780],{"class":27,"line":53},[25,781,782],{"class":49},"    function isSafe(board, row, col) {\n",[25,784,785],{"class":27,"line":58},[25,786,787],{"class":49},"        for (let i = 0; i \u003C col; i++) {\n",[25,789,790,793,797,800,803],{"class":27,"line":83},[25,791,792],{"class":49},"            if (board[",[25,794,796],{"class":795},"s8Wv-","row",[25,798,799],{"class":49},"][",[25,801,802],{"class":795},"i",[25,804,805],{"class":49},"] === 1) return false;\n",[25,807,808],{"class":27,"line":88},[25,809,810],{"class":49},"        }\n",[25,812,813],{"class":27,"line":112},[25,814,815],{"class":49},"        for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n",[25,817,818,820,822,824,827],{"class":27,"line":117},[25,819,792],{"class":49},[25,821,802],{"class":795},[25,823,799],{"class":49},[25,825,826],{"class":795},"j",[25,828,805],{"class":49},[25,830,831],{"class":27,"line":123},[25,832,810],{"class":49},[25,834,835],{"class":27,"line":128},[25,836,837],{"class":49},"        for (let i = row, j = col; i \u003C n && j >= 0; i++, j--) {\n",[25,839,840,842,844,846,848],{"class":27,"line":134},[25,841,792],{"class":49},[25,843,802],{"class":795},[25,845,799],{"class":49},[25,847,826],{"class":795},[25,849,805],{"class":49},[25,851,852],{"class":27,"line":139},[25,853,810],{"class":49},[25,855,856],{"class":27,"line":157},[25,857,858],{"class":49},"        return true;\n",[25,860,861],{"class":27,"line":170},[25,862,863],{"class":49},"    }\n",[25,865,866],{"class":27,"line":181},[25,867,39],{"emptyLinePlaceholder":38},[25,869,870],{"class":27,"line":192},[25,871,872],{"class":49},"    function solveUtil(board, col) {\n",[25,874,875],{"class":27,"line":203},[25,876,877],{"class":49},"        if (col === n) {\n",[25,879,880,883,886],{"class":27,"line":208},[25,881,882],{"class":49},"            solutions.push(board.map(row => [",[25,884,885],{"class":795},"...row",[25,887,888],{"class":49},"]));\n",[25,890,891],{"class":27,"line":213},[25,892,893],{"class":49},"            return;\n",[25,895,896],{"class":27,"line":218},[25,897,810],{"class":49},[25,899,900],{"class":27,"line":224},[25,901,902],{"class":49},"        for (let i = 0; i \u003C n; i++) {\n",[25,904,905],{"class":27,"line":229},[25,906,907],{"class":49},"            if (isSafe(board, i, col)) {\n",[25,909,910,913,915,917,920],{"class":27,"line":235},[25,911,912],{"class":49},"                board[",[25,914,802],{"class":795},[25,916,799],{"class":49},[25,918,919],{"class":795},"col",[25,921,922],{"class":49},"] = 1;\n",[25,924,925],{"class":27,"line":241},[25,926,927],{"class":49},"                solveUtil(board, col + 1);\n",[25,929,930,932,934,936,938],{"class":27,"line":255},[25,931,912],{"class":49},[25,933,802],{"class":795},[25,935,799],{"class":49},[25,937,919],{"class":795},[25,939,940],{"class":49},"] = 0;\n",[25,942,943],{"class":27,"line":268},[25,944,945],{"class":49},"            }\n",[25,947,948],{"class":27,"line":280},[25,949,810],{"class":49},[25,951,952],{"class":27,"line":285},[25,953,863],{"class":49},[25,955,956],{"class":27,"line":291},[25,957,39],{"emptyLinePlaceholder":38},[25,959,960],{"class":27,"line":307},[25,961,962],{"class":49},"    const board = Array(n).fill().map(() => Array(n).fill(0));\n",[25,964,965],{"class":27,"line":315},[25,966,967],{"class":49},"    solveUtil(board, 0);\n",[25,969,970],{"class":27,"line":324},[25,971,972],{"class":49},"    return solutions;\n",[25,974,975],{"class":27,"line":332},[25,976,977],{"class":49},"}\n",[25,979,980],{"class":27,"line":340},[25,981,39],{"emptyLinePlaceholder":38},[25,983,984],{"class":27,"line":345},[25,985,986],{"class":49},"// Contoh\n",[25,988,989],{"class":27,"line":350},[25,990,991],{"class":49},"const solutions = solveNQueens(4);\n",[25,993,994],{"class":27,"line":355},[25,995,996],{"class":49},"console.log(\"Jumlah solusi:\", solutions.length);\n",[25,998,999],{"class":27,"line":361},[25,1000,1001],{"class":49},"solutions.forEach((sol, idx) => {\n",[25,1003,1004,1007,1010],{"class":27,"line":366},[25,1005,1006],{"class":49},"    console.log(",[25,1008,1009],{"class":506},"`Solusi ${idx + 1}:`",[25,1011,1012],{"class":49},");\n",[25,1014,1015],{"class":27,"line":626},[25,1016,1017],{"class":49},"    console.log(sol.map(row => row.map(c => c ? \"Q\" : \".\").join(\" \")).join(\"\\n\"));\n",[25,1019,1020],{"class":27,"line":632},[25,1021,1022],{"class":49},"});\n",[755,1024,1026],{"id":1025},"kompleksitas-algoritma","Kompleksitas Algoritma",[1028,1029,1031],"h3",{"id":1030},"waktu","⏱ Waktu:",[1033,1034,1035,1043],"ul",{},[1036,1037,1038,1042],"li",{},[1039,1040,1041],"strong",{},"O(N!)"," pada kasus terburuk (karena percobaan kombinasi posisi)",[1036,1044,1045],{},"Dapat dioptimalkan menggunakan bitmask dan pruning",[1028,1047,1049],{"id":1048},"ruang","🧠 Ruang:",[1033,1051,1052,1058],{},[1036,1053,1054,1057],{},[1039,1055,1056],{},"O(N²)"," untuk menyimpan papan",[1036,1059,1060,1061,1064],{},"Dapat dikurangi menjadi ",[1039,1062,1063],{},"O(N)"," hanya dengan array posisi per kolom",[755,1066,1068],{"id":1067},"optimisasi-variasi","Optimisasi & Variasi",[1028,1070,1072],{"id":1071},"optimisasi","🔧 Optimisasi:",[1033,1074,1075,1081,1087],{},[1036,1076,1077,1080],{},[1039,1078,1079],{},"Bitmasking",": Representasi baris, kolom, dan diagonal dalam bentuk bit",[1036,1082,1083,1086],{},[1039,1084,1085],{},"Symmetry Breaking",": Kurangi solusi duplikat dengan membatasi pilihan awal",[1036,1088,1089,1092],{},[1039,1090,1091],{},"Heuristik MRV (Minimum Remaining Value)",": Prioritaskan baris dengan pilihan terbatas",[1028,1094,1096],{"id":1095},"variasi","🔁 Variasi:",[1033,1098,1099,1109,1115],{},[1036,1100,1101,1104,1105,1108],{},[1039,1102,1103],{},"N-Bishop"," atau ",[1039,1106,1107],{},"N-Rook",": Hanya pergerakan tertentu yang diperbolehkan",[1036,1110,1111,1114],{},[1039,1112,1113],{},"Superqueen",": Gabungan ratu dan kuda",[1036,1116,1117,1120],{},[1039,1118,1119],{},"3D N-Queen",": Penempatan ratu di papan kubus 3D",[755,1122,1124],{"id":1123},"aplikasi-dunia-nyata","Aplikasi Dunia Nyata",[1033,1126,1127,1134,1141,1148],{},[1036,1128,1129,1130,1133],{},"✈️ ",[1039,1131,1132],{},"Penjadwalan bandara",": Menempatkan pesawat agar tidak terjadi konflik landasan",[1036,1135,1136,1137,1140],{},"🔍 ",[1039,1138,1139],{},"Constraint satisfaction problems (CSP)",": Dalam AI dan optimasi",[1036,1142,1143,1144,1147],{},"🔩 ",[1039,1145,1146],{},"Pengujian VLSI",": Untuk merancang sirkuit terintegrasi",[1036,1149,1150,1151,1154],{},"🧮 ",[1039,1152,1153],{},"Pengajaran algoritma",": Materi dasar dalam pemrograman kompetitif dan rekursi",[755,1156,1158],{"id":1157},"kesimpulan","Kesimpulan",[377,1160,1161,1162,1165,1166,1169,1170,1173],{},"Masalah ",[1039,1163,1164],{},"N-Queen"," adalah contoh klasik yang indah dari ",[1039,1167,1168],{},"backtracking"," dan ",[1039,1171,1172],{},"constraint solving",". Ia sederhana untuk dipahami, namun cukup kompleks untuk dijadikan latihan pemrograman yang menantang. Banyak algoritma lanjutan lahir dari pendekatan dasar yang digunakan dalam menyelesaikan N-Queen.",[1175,1176,1177],"blockquote",{},[377,1178,1179,1180,1183],{},"🧠 ",[1039,1181,1182],{},"Tip",": Latih dengan N kecil (mis. N=4 atau 5) sebelum mencoba optimisasi untuk N besar (N > 10).",[1185,1186,1187],"style",{},"html pre.shiki code .sXvaJ, html code.shiki .sXvaJ{--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;--shiki-default:#79B8FF;--shiki-default-font-weight:bold;--shiki-light:#005CC5;--shiki-light-font-weight:bold}html pre.shiki code .s9_AW, html code.shiki .s9_AW{--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;--shiki-default:#E1E4E8;--shiki-default-font-weight:bold;--shiki-light:#24292E;--shiki-light-font-weight:bold}html pre.shiki code .suVJd, html code.shiki .suVJd{--shiki-dark:#E1E4E8;--shiki-default:#E1E4E8;--shiki-light:#24292E}html pre.shiki code .scWFE, html code.shiki .scWFE{--shiki-dark:#85E89D;--shiki-default:#85E89D;--shiki-light:#22863A}html pre.shiki code .s1uPE, html code.shiki .s1uPE{--shiki-dark:#FFAB70;--shiki-default:#FFAB70;--shiki-light:#E36209}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html pre.shiki code .sAPL1, html code.shiki .sAPL1{--shiki-dark:#79B8FF;--shiki-default:#79B8FF;--shiki-light:#005CC5}html pre.shiki code .s8Wv-, html code.shiki .s8Wv-{--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline;--shiki-default:#DBEDFF;--shiki-default-text-decoration:underline;--shiki-light:#032F62;--shiki-light-text-decoration:underline}",{"title":20,"searchDepth":35,"depth":35,"links":1189},[1190,1191,1195,1199,1200],{"id":757,"depth":35,"text":758},{"id":1025,"depth":35,"text":1026,"children":1192},[1193,1194],{"id":1030,"depth":42,"text":1031},{"id":1048,"depth":42,"text":1049},{"id":1067,"depth":35,"text":1068,"children":1196},[1197,1198],{"id":1071,"depth":42,"text":1072},{"id":1095,"depth":42,"text":1096},{"id":1123,"depth":35,"text":1124},{"id":1157,"depth":35,"text":1158},null,"Teka-teki backtracking klasik: Menempatkan N ratu pada papan catur N×N tanpa saling menyerang",{"script":1204},[1205],{"type":1206,"key":1207,"data-nuxt-schema-org":38,"nodes":1208},"application/ld+json","schema-org-graph",[1209],{"_resolver":1210},"webPage","/articles/7.jpeg",{},{"props":1214},{},"/en/articles/n-queens-problem",{"_resolver":1210},{"title":5,"description":1202},{"loc":1215,"videos":1219,"images":1220,"lastmod":1221},[],[],"2025-06-13T00:00:00.000Z","en/articles/n-queens-problem",[],"WeaoJxIdE7H5U8kX_S-FIOjPotzFgHa3hfMlIq3LS-c",1750352996650]