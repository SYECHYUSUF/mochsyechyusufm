[{"data":1,"prerenderedAt":639},["ShallowReactive",2],{"/en/articles/djikstra-algorithm":3},{"id":4,"title":5,"body":6,"date":611,"description":612,"extension":613,"head":614,"image":623,"meta":624,"navigation":619,"ogImage":625,"path":627,"readingTime":628,"robots":629,"schemaOrg":630,"seo":631,"sitemap":632,"stem":636,"tags":637,"__hash__":638},"articles_en/en/articles/djikstra-algorithm.md","Memahami Algoritma Dijkstra",{"type":7,"value":8,"toc":604},"minimal",[9,18,23,30,60,77,81,88,270,274,277,407,416,518,523,539,543,546,572,576,597,600],[10,11,12,13,17],"p",{},"Algoritma Dijkstra, yang dinamai dari penemunya Edsger W. Dijkstra, adalah salah satu algoritma ",[14,15,16],"strong",{},"pencarian jalur terpendek (shortest path algorithm)"," yang paling terkenal dan banyak digunakan. Algoritma ini dirancang untuk menemukan jalur terpendek antara satu titik awal (disebut \"sumber\") ke semua titik lainnya dalam sebuah graf berbobot (weighted graph).",[19,20,22],"h3",{"id":21},"apa-itu-graf-berbobot","Apa itu Graf Berbobot?",[10,24,25,26,29],{},"Sebelum masuk lebih dalam, penting untuk memahami apa itu ",[14,27,28],{},"graf berbobot",". Dalam konteks algoritma Dijkstra:",[31,32,33,40,46],"ul",{},[34,35,36,39],"li",{},[14,37,38],{},"Node (Titik/Simpul)",": Merepresentasikan lokasi atau entitas. Misalnya, kota-kota dalam peta, atau server dalam jaringan komputer.",[34,41,42,45],{},[14,43,44],{},"Edge (Sisi/Tepi)",": Merepresentasikan koneksi atau hubungan antara dua node.",[34,47,48,51,52,56,57,59],{},[14,49,50],{},"Bobot (Weight)",": Nilai numerik yang terkait dengan setiap ",[53,54,55],"em",{},"edge",". Bobot ini bisa berupa jarak, waktu, biaya, atau hambatan. Algoritma Dijkstra mencari jalur di mana total bobot ",[53,58,55],{}," yang dilalui adalah yang terkecil.",[10,61,62,65,66,69,70,72,73,76],{},[14,63,64],{},"Contoh Sederhana:"," Bayangkan peta jalan. Kota adalah ",[53,67,68],{},"node",", jalan adalah ",[53,71,55],{},", dan jarak antar kota adalah ",[53,74,75],{},"bobot",". Algoritma Dijkstra bisa membantumu menemukan rute terpendek dari rumahmu ke semua tempat tujuan lain di peta.",[19,78,80],{"id":79},"bagaimana-cara-kerja-algoritma-dijkstra","Bagaimana Cara Kerja Algoritma Dijkstra?",[10,82,83,84,87],{},"Algoritma Dijkstra bekerja secara ",[14,85,86],{},"rakus (greedy)",", artinya pada setiap langkah, ia membuat pilihan yang tampak terbaik saat itu dengan harapan akan membawa ke solusi optimal secara keseluruhan. Berikut adalah langkah-langkah intinya:",[89,90,91,124,156,222,251],"ol",{},[34,92,93,96,97],{},[14,94,95],{},"Inisialisasi",":\n",[31,98,99,115],{},[34,100,101,102,104,105,108,109,111,112,114],{},"Setiap ",[53,103,68],{}," diberikan ",[14,106,107],{},"jarak sementara (tentative distance)",". Jarak ke ",[53,110,68],{}," sumber diatur ke 0, dan semua ",[53,113,68],{}," lainnya diatur ke tak hingga (∞).",[34,116,117,118,120,121,123],{},"Sebuah set ",[53,119,68],{}," yang belum dikunjungi (atau belum \"diselesaikan\") dibuat dan awalnya berisi semua ",[53,122,68],{}," dalam graf.",[34,125,126,129,130,129,135,96,138],{},[14,127,128],{},"Pemilihan"," ",[53,131,132],{},[14,133,134],{},"Node",[14,136,137],{},"Saat Ini",[31,139,140],{},[34,141,142,143,145,146,148,149,152,153,155],{},"Dari set ",[53,144,68],{}," yang belum dikunjungi, pilih ",[53,147,68],{}," dengan jarak sementara terkecil. Ini akan menjadi ",[14,150,151],{},"current node"," atau ",[53,154,68],{}," yang sedang \"diperiksa\".",[34,157,158,96,161],{},[14,159,160],{},"Pembaruan Jarak Tetangga",[31,162,163],{},[34,164,165,166,169,170,96,172],{},"Untuk setiap ",[14,167,168],{},"tetangga"," dari ",[53,171,151],{},[31,173,174,208],{},[34,175,176,177,179,180,182,183,129,186,129,190,129,193,129,197,129,200,129,204,207],{},"Hitung jarak baru dari ",[53,178,68],{}," sumber ke tetangga tersebut melalui ",[53,181,151],{},". Caranya adalah ",[14,184,185],{},"jarak",[53,187,188],{},[14,189,151],{},[14,191,192],{},"(dari sumber) + bobot",[53,194,195],{},[14,196,55],{},[14,198,199],{},"dari",[53,201,202],{},[14,203,151],{},[14,205,206],{},"ke tetangga",".",[34,209,210,211,214,215,217,218,221],{},"Jika jarak baru ini lebih kecil dari jarak sementara yang sudah ada untuk tetangga tersebut, ",[14,212,213],{},"perbarui jarak sementara tetangga"," dan catat ",[53,216,151],{}," sebagai ",[14,219,220],{},"pendahulu (predecessor)"," dari tetangga tersebut. Ini penting untuk merekonstruksi jalur nantinya.",[34,223,224,129,227,129,231,96,234],{},[14,225,226],{},"Tandai",[53,228,229],{},[14,230,134],{},[14,232,233],{},"Sebagai Telah Dikunjungi",[31,235,236],{},[34,237,238,239,241,242,244,245,247,248,250],{},"Setelah semua tetangga ",[53,240,151],{}," diperiksa dan jaraknya diperbarui jika perlu, ",[53,243,151],{}," dihapus dari set ",[53,246,68],{}," yang belum dikunjungi. Ini berarti jalur terpendek ke ",[53,249,68],{}," tersebut telah \"ditemukan\" dan \"final\".",[34,252,253,96,256],{},[14,254,255],{},"Ulangi",[31,257,258],{},[34,259,260,261,263,264,266,267,269],{},"Langkah 2 sampai 4 diulang sampai set ",[53,262,68],{}," yang belum dikunjungi kosong, atau sampai ",[53,265,68],{}," tujuan yang spesifik telah \"diselesaikan\" (jika kamu hanya mencari jalur ke satu ",[53,268,68],{}," tertentu).",[19,271,273],{"id":272},"ilustrasi-sederhana","Ilustrasi Sederhana:",[10,275,276],{},"Misalkan kita punya graf ini:",[278,279,284],"pre",{"className":280,"code":281,"language":282,"meta":283,"style":283},"language-js shiki shiki-themes github-dark github-dark github-light","A --(1)--> B --(3)--> D\n|           ^          ^\n(4)         |          |\n|           (1)        (2)\nv           |          |\nC --(1)-----+          E\n","js","",[285,286,287,330,342,358,377,387],"code",{"__ignoreMap":283},[288,289,292,296,300,304,307,310,313,316,318,320,323,325,327],"span",{"class":290,"line":291},"line",1,[288,293,295],{"class":294},"sAPL1","A",[288,297,299],{"class":298},"sEiGg"," --",[288,301,303],{"class":302},"suVJd","(",[288,305,306],{"class":294},"1",[288,308,309],{"class":302},")",[288,311,312],{"class":298},"-->",[288,314,315],{"class":294}," B",[288,317,299],{"class":298},[288,319,303],{"class":302},[288,321,322],{"class":294},"3",[288,324,309],{"class":302},[288,326,312],{"class":298},[288,328,329],{"class":294}," D\n",[288,331,333,336,339],{"class":290,"line":332},2,[288,334,335],{"class":298},"|",[288,337,338],{"class":298},"           ^",[288,340,341],{"class":298},"          ^\n",[288,343,345,347,350,353,355],{"class":290,"line":344},3,[288,346,303],{"class":302},[288,348,349],{"class":294},"4",[288,351,352],{"class":302},")         ",[288,354,335],{"class":298},[288,356,357],{"class":298},"          |\n",[288,359,361,363,366,368,371,374],{"class":290,"line":360},4,[288,362,335],{"class":298},[288,364,365],{"class":302},"           (",[288,367,306],{"class":294},[288,369,370],{"class":302},")        (",[288,372,373],{"class":294},"2",[288,375,376],{"class":302},")\n",[288,378,380,383,385],{"class":290,"line":379},5,[288,381,382],{"class":302},"v           ",[288,384,335],{"class":298},[288,386,357],{"class":298},[288,388,390,393,395,397,399,401,404],{"class":290,"line":389},6,[288,391,392],{"class":294},"C",[288,394,299],{"class":298},[288,396,303],{"class":302},[288,398,306],{"class":294},[288,400,309],{"class":302},[288,402,403],{"class":298},"-----+",[288,405,406],{"class":294},"          E\n",[10,408,409,410,412,413,415],{},"Dan kita ingin mencari jalur terpendek dari ",[14,411,295],{}," ke semua ",[53,414,68],{}," lainnya.",[31,417,418,442,459,476,490,504],{},[34,419,420,96,422],{},[14,421,95],{},[31,423,424,427,430,433,436,439],{},[34,425,426],{},"A: 0",[34,428,429],{},"B: ∞",[34,431,432],{},"C: ∞",[34,434,435],{},"D: ∞",[34,437,438],{},"E: ∞",[34,440,441],{},"Belum Dikunjungi: {A, B, C, D, E}",[34,443,444,447,448],{},[14,445,446],{},"Langkah 1",": Pilih A (jarak 0).\n",[31,449,450,453,456],{},[34,451,452],{},"Perbarui B: dist(A) + w(A,B) = 0 + 1 = 1. dist(B) = 1. Pendahulu B = A.",[34,454,455],{},"Perbarui C: dist(A) + w(A,C) = 0 + 4 = 4. dist(C) = 4. Pendahulu C = A.",[34,457,458],{},"A selesai. Belum Dikunjungi: {B, C, D, E}",[34,460,461,464,465],{},[14,462,463],{},"Langkah 2",": Pilih B (jarak 1).\n",[31,466,467,470,473],{},[34,468,469],{},"Perbarui D: dist(B) + w(B,D) = 1 + 3 = 4. dist(D) = 4. Pendahulu D = B.",[34,471,472],{},"Perbarui C: dist(B) + w(B,C) = 1 + 1 = 2. dist(C) saat ini 4. Karena 2 \u003C 4, perbarui dist(C) = 2. Pendahulu C = B.",[34,474,475],{},"B selesai. Belum Dikunjungi: {C, D, E}",[34,477,478,481,482],{},[14,479,480],{},"Langkah 3",": Pilih C (jarak 2).\n",[31,483,484,487],{},[34,485,486],{},"C tidak punya tetangga yang belum dikunjungi.",[34,488,489],{},"C selesai. Belum Dikunjungi: {D, E}",[34,491,492,495,496],{},[14,493,494],{},"Langkah 4",": Pilih D (jarak 4).\n",[31,497,498,501],{},[34,499,500],{},"Perbarui E: dist(D) + w(D,E) = 4 + 2 = 6. dist(E) = 6. Pendahulu E = D.",[34,502,503],{},"D selesai. Belum Dikunjungi: {E}",[34,505,506,509,510],{},[14,507,508],{},"Langkah 5",": Pilih E (jarak 6).\n",[31,511,512,515],{},[34,513,514],{},"E tidak punya tetangga yang belum dikunjungi.",[34,516,517],{},"E selesai. Belum Dikunjungi: {}",[10,519,520],{},[14,521,522],{},"Hasil Akhir (Jarak Terpendek dari A):",[31,524,525,527,530,533,536],{},[34,526,426],{},[34,528,529],{},"B: 1 (A -> B)",[34,531,532],{},"C: 2 (A -> B -> C)",[34,534,535],{},"D: 4 (A -> B -> D)",[34,537,538],{},"E: 6 (A -> B -> D -> E)",[19,540,542],{"id":541},"kapan-menggunakan-dijkstra","Kapan Menggunakan Dijkstra?",[10,544,545],{},"Algoritma Dijkstra sangat berguna dalam berbagai skenario:",[31,547,548,554,560,566],{},[34,549,550,553],{},[14,551,552],{},"Pencarian Rute GPS",": Menemukan jalur terpendek atau tercepat antar lokasi.",[34,555,556,559],{},[14,557,558],{},"Jaringan Komputer",": Menemukan jalur terbaik untuk paket data.",[34,561,562,565],{},[14,563,564],{},"Logistik dan Pengiriman",": Mengoptimalkan rute pengiriman barang.",[34,567,568,571],{},[14,569,570],{},"Game Development",": Menemukan jalur untuk AI (Artificial Intelligence) musuh atau karakter.",[19,573,575],{"id":574},"batasan-algoritma-dijkstra","Batasan Algoritma Dijkstra",[10,577,578,579,129,582,129,586,589,590,593,594,596],{},"Penting untuk dicatat bahwa Dijkstra ",[14,580,581],{},"tidak dapat bekerja dengan",[53,583,584],{},[14,585,55],{},[14,587,588],{},"yang memiliki bobot negatif",". Jika grafmu memiliki bobot negatif, kamu perlu menggunakan algoritma lain seperti ",[14,591,592],{},"Bellman-Ford",". Hal ini karena bobot negatif dapat mengacaukan logika \"rakus\" Dijkstra, di mana jalur yang awalnya terlihat lebih panjang bisa menjadi lebih pendek setelah melewati ",[53,595,55],{}," berbobot negatif.",[10,598,599],{},"Semoga penjelasan ini cukup jelas dan informatif untuk artikelmu! Apakah ada bagian lain yang ingin kamu tambahkan atau jelaskan lebih lanjut?",[601,602,603],"style",{},"html pre.shiki code .sAPL1, html code.shiki .sAPL1{--shiki-dark:#79B8FF;--shiki-default:#79B8FF;--shiki-light:#005CC5}html pre.shiki code .sEiGg, html code.shiki .sEiGg{--shiki-dark:#F97583;--shiki-default:#F97583;--shiki-light:#D73A49}html pre.shiki code .suVJd, html code.shiki .suVJd{--shiki-dark:#E1E4E8;--shiki-default:#E1E4E8;--shiki-light:#24292E}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}",{"title":283,"searchDepth":332,"depth":332,"links":605},[606,607,608,609,610],{"id":21,"depth":344,"text":22},{"id":79,"depth":344,"text":80},{"id":272,"depth":344,"text":273},{"id":541,"depth":344,"text":542},{"id":574,"depth":344,"text":575},"19/06/2025","Selami dunia pencarian jalur terpendek dengan salah satu algoritma paling fundamental.","md",{"script":615},[616],{"type":617,"key":618,"data-nuxt-schema-org":619,"nodes":620},"application/ld+json","schema-org-graph",true,[621],{"_resolver":622},"webPage","/articles/1.jpeg",{},{"props":626},{},"/en/articles/djikstra-algorithm","10",null,{"_resolver":622},{"title":5,"description":612},{"loc":627,"videos":633,"images":634,"lastmod":635},[],[],"2025-06-13T00:00:00.000Z","en/articles/djikstra-algorithm",[],"JkYGUmcz3xYypUr3CePPtGRVL5plRyH0MRGCdLUItjs",1750331278436]