[{"data":1,"prerenderedAt":1028},["ShallowReactive",2],{"/en/articles/deapth-first-search-bfs":3},{"id":4,"title":5,"body":6,"date":1003,"description":1004,"extension":1005,"head":1006,"image":1014,"meta":1015,"navigation":37,"ogImage":1016,"path":1018,"readingTime":1003,"robots":1003,"schemaOrg":1019,"seo":1020,"sitemap":1021,"stem":1025,"tags":1026,"__hash__":1027},"articles_en/en/articles/deapth-first-search-bfs.md","Memahami Algoritma Depth-First Search (DFS)",{"type":7,"value":8,"toc":996},"minimal",[9,14,296,308,312,896,901,906,944,948,971,980,984,987,992],[10,11,13],"h1",{"id":12},"deapth-first-search-bfs","DEAPTH FIRST SEARCH (BFS)",[15,16,21],"pre",{"className":17,"code":18,"language":19,"meta":20,"style":20},"language-markdown shiki shiki-themes github-dark github-dark github-light","# Apa itu Algoritma Depth-First Search (DFS)?\n\n**Depth-First Search (DFS)** adalah algoritma untuk melintasi atau mencari elemen dalam struktur data seperti **pohon** atau **grafik**. DFS memulai penelusuran dari node akar (atau node yang dipilih) dan menjelajah sejauh mungkin di sepanjang setiap cabang sebelum melakukan *backtrack*.\n\n> 🎯 Analoginya seperti menjelajah labirin: ikuti satu jalan hingga mentok, lalu kembali ke percabangan sebelumnya dan coba jalur lain.\n\n---\n\n## Aplikasi DFS\n\nDFS digunakan dalam berbagai bidang ilmu komputer, di antaranya:\n\n- 🔍 **Pencarian jalur**: Menemukan rute antara dua simpul dalam graf.\n- 🔁 **Deteksi siklus**: Mengidentifikasi apakah graf mengandung siklus.\n- 📊 **Pengurutan topologis**: Alternatif untuk Algoritma Kahn.\n- 🔗 **Menemukan komponen terhubung** dalam graf tak berarah.\n- 🧩 **Penyelesaian puzzle**: Contohnya Sudoku atau labirin.\n- 🌐 **Analisis jaringan**: Menjelajahi struktur koneksi.\n\n---\n\n## Cara Kerja Algoritma DFS\n\nDFS dapat diimplementasikan secara **rekursif** atau **iteratif menggunakan stack**.\n\n### 1. Inisialisasi:\n\n- Buat `visited[]` untuk menandai node yang sudah dikunjungi.\n- Mulai dari `start node`.\n- Tandai node sebagai dikunjungi.\n\n### 2. Penjelajahan:\n\n- Ambil node dari stack atau parameter rekursif.\n- Proses node (misalnya: cetak, simpan).\n- Untuk setiap tetangga yang belum dikunjungi:\n  - Tandai sebagai dikunjungi.\n  - Tambahkan ke stack atau panggil DFS secara rekursif.\n\n### 3. Backtracking:\n\n- Jika semua tetangga sudah dikunjungi, kembali ke node sebelumnya.\n\n---\n\n## Contoh Kasus\n\nGrafik:\n","markdown","",[22,23,24,32,39,45,50,56,61,67,72,78,83,89,94,100,106,112,118,124,130,135,140,145,151,156,162,167,173,178,184,190,196,201,207,212,218,224,230,236,242,247,253,258,264,269,274,279,285,290],"code",{"__ignoreMap":20},[25,26,29],"span",{"class":27,"line":28},"line",1,[25,30,31],{},"# Apa itu Algoritma Depth-First Search (DFS)?\n",[25,33,35],{"class":27,"line":34},2,[25,36,38],{"emptyLinePlaceholder":37},true,"\n",[25,40,42],{"class":27,"line":41},3,[25,43,44],{},"**Depth-First Search (DFS)** adalah algoritma untuk melintasi atau mencari elemen dalam struktur data seperti **pohon** atau **grafik**. DFS memulai penelusuran dari node akar (atau node yang dipilih) dan menjelajah sejauh mungkin di sepanjang setiap cabang sebelum melakukan *backtrack*.\n",[25,46,48],{"class":27,"line":47},4,[25,49,38],{"emptyLinePlaceholder":37},[25,51,53],{"class":27,"line":52},5,[25,54,55],{},"> 🎯 Analoginya seperti menjelajah labirin: ikuti satu jalan hingga mentok, lalu kembali ke percabangan sebelumnya dan coba jalur lain.\n",[25,57,59],{"class":27,"line":58},6,[25,60,38],{"emptyLinePlaceholder":37},[25,62,64],{"class":27,"line":63},7,[25,65,66],{},"---\n",[25,68,70],{"class":27,"line":69},8,[25,71,38],{"emptyLinePlaceholder":37},[25,73,75],{"class":27,"line":74},9,[25,76,77],{},"## Aplikasi DFS\n",[25,79,81],{"class":27,"line":80},10,[25,82,38],{"emptyLinePlaceholder":37},[25,84,86],{"class":27,"line":85},11,[25,87,88],{},"DFS digunakan dalam berbagai bidang ilmu komputer, di antaranya:\n",[25,90,92],{"class":27,"line":91},12,[25,93,38],{"emptyLinePlaceholder":37},[25,95,97],{"class":27,"line":96},13,[25,98,99],{},"- 🔍 **Pencarian jalur**: Menemukan rute antara dua simpul dalam graf.\n",[25,101,103],{"class":27,"line":102},14,[25,104,105],{},"- 🔁 **Deteksi siklus**: Mengidentifikasi apakah graf mengandung siklus.\n",[25,107,109],{"class":27,"line":108},15,[25,110,111],{},"- 📊 **Pengurutan topologis**: Alternatif untuk Algoritma Kahn.\n",[25,113,115],{"class":27,"line":114},16,[25,116,117],{},"- 🔗 **Menemukan komponen terhubung** dalam graf tak berarah.\n",[25,119,121],{"class":27,"line":120},17,[25,122,123],{},"- 🧩 **Penyelesaian puzzle**: Contohnya Sudoku atau labirin.\n",[25,125,127],{"class":27,"line":126},18,[25,128,129],{},"- 🌐 **Analisis jaringan**: Menjelajahi struktur koneksi.\n",[25,131,133],{"class":27,"line":132},19,[25,134,38],{"emptyLinePlaceholder":37},[25,136,138],{"class":27,"line":137},20,[25,139,66],{},[25,141,143],{"class":27,"line":142},21,[25,144,38],{"emptyLinePlaceholder":37},[25,146,148],{"class":27,"line":147},22,[25,149,150],{},"## Cara Kerja Algoritma DFS\n",[25,152,154],{"class":27,"line":153},23,[25,155,38],{"emptyLinePlaceholder":37},[25,157,159],{"class":27,"line":158},24,[25,160,161],{},"DFS dapat diimplementasikan secara **rekursif** atau **iteratif menggunakan stack**.\n",[25,163,165],{"class":27,"line":164},25,[25,166,38],{"emptyLinePlaceholder":37},[25,168,170],{"class":27,"line":169},26,[25,171,172],{},"### 1. Inisialisasi:\n",[25,174,176],{"class":27,"line":175},27,[25,177,38],{"emptyLinePlaceholder":37},[25,179,181],{"class":27,"line":180},28,[25,182,183],{},"- Buat `visited[]` untuk menandai node yang sudah dikunjungi.\n",[25,185,187],{"class":27,"line":186},29,[25,188,189],{},"- Mulai dari `start node`.\n",[25,191,193],{"class":27,"line":192},30,[25,194,195],{},"- Tandai node sebagai dikunjungi.\n",[25,197,199],{"class":27,"line":198},31,[25,200,38],{"emptyLinePlaceholder":37},[25,202,204],{"class":27,"line":203},32,[25,205,206],{},"### 2. Penjelajahan:\n",[25,208,210],{"class":27,"line":209},33,[25,211,38],{"emptyLinePlaceholder":37},[25,213,215],{"class":27,"line":214},34,[25,216,217],{},"- Ambil node dari stack atau parameter rekursif.\n",[25,219,221],{"class":27,"line":220},35,[25,222,223],{},"- Proses node (misalnya: cetak, simpan).\n",[25,225,227],{"class":27,"line":226},36,[25,228,229],{},"- Untuk setiap tetangga yang belum dikunjungi:\n",[25,231,233],{"class":27,"line":232},37,[25,234,235],{},"  - Tandai sebagai dikunjungi.\n",[25,237,239],{"class":27,"line":238},38,[25,240,241],{},"  - Tambahkan ke stack atau panggil DFS secara rekursif.\n",[25,243,245],{"class":27,"line":244},39,[25,246,38],{"emptyLinePlaceholder":37},[25,248,250],{"class":27,"line":249},40,[25,251,252],{},"### 3. Backtracking:\n",[25,254,256],{"class":27,"line":255},41,[25,257,38],{"emptyLinePlaceholder":37},[25,259,261],{"class":27,"line":260},42,[25,262,263],{},"- Jika semua tetangga sudah dikunjungi, kembali ke node sebelumnya.\n",[25,265,267],{"class":27,"line":266},43,[25,268,38],{"emptyLinePlaceholder":37},[25,270,272],{"class":27,"line":271},44,[25,273,66],{},[25,275,277],{"class":27,"line":276},45,[25,278,38],{"emptyLinePlaceholder":37},[25,280,282],{"class":27,"line":281},46,[25,283,284],{},"## Contoh Kasus\n",[25,286,288],{"class":27,"line":287},47,[25,289,38],{"emptyLinePlaceholder":37},[25,291,293],{"class":27,"line":292},48,[25,294,295],{},"Grafik:\n",[15,297,301],{"className":298,"code":299,"language":300,"meta":20,"style":20},"language-js shiki shiki-themes github-dark github-dark github-light","A\n","js",[22,302,303],{"__ignoreMap":20},[25,304,305],{"class":27,"line":28},[25,306,299],{"class":307},"sAPL1",[309,310,311],"p",{},"/ B C / \\ D E F",[15,313,315],{"className":298,"code":314,"language":300,"meta":20,"style":20},"\n**Tujuan**: Jelajahi graf menggunakan DFS dari node A.\n\n**Urutan Penjelajahan (Output)**: `A, B, D, E, C, F`\n\nLangkah-langkah DFS:\n1. DFS(A) → `A`\n2. DFS(B) → `B`\n3. DFS(D) → `D` → backtrack ke B\n4. DFS(E) → `E` → backtrack ke B → backtrack ke A\n5. DFS(C) → `C`\n6. DFS(F) → `F`\n\n---\n\n## Implementasi DFS dalam C++\n\n```cpp\n#include \u003Ciostream>\n#include \u003Cvector>\n#include \u003Cstack>\n\nstd::vector\u003Cstd::vector\u003Cint>> adj;\nstd::vector\u003Cbool> visited;\n\n// DFS Rekursif\nvoid dfsRecursive(int u) {\n    visited[u] = true;\n    std::cout \u003C\u003C u \u003C\u003C \" \";\n\n    for (int v : adj[u]) {\n        if (!visited[v]) dfsRecursive(v);\n    }\n}\n\n// DFS Iteratif\nvoid dfsIterative(int startNode) {\n    std::vector\u003Cbool> localVisited(adj.size(), false);\n    std::stack\u003Cint> s;\n\n    s.push(startNode);\n    localVisited[startNode] = true;\n\n    while (!s.empty()) {\n        int u = s.top();\n        s.pop();\n\n        std::cout \u003C\u003C u \u003C\u003C \" \";\n\n        for (int i = adj[u].size() - 1; i >= 0; --i) {\n            int v = adj[u][i];\n            if (!localVisited[v]) {\n                localVisited[v] = true;\n                s.push(v);\n            }\n        }\n    }\n}\n\nint main() {\n    int numNodes = 6; // A=0, B=1, C=2, D=3, E=4, F=5\n    adj.resize(numNodes);\n    visited.resize(numNodes, false);\n\n    // Menyusun graf tidak berarah\n    adj[0] = {1, 2}; // A → B, C\n    adj[1] = {0, 3, 4}; // B → A, D, E\n    adj[2] = {0, 5}; // C → A, F\n    adj[3] = {1}; // D → B\n    adj[4] = {1}; // E → B\n    adj[5] = {2}; // F → C\n\n    std::cout \u003C\u003C \"DFS Rekursif: \";\n    dfsRecursive(0);\n    std::cout \u003C\u003C \"\\n\";\n\n    std::cout \u003C\u003C \"DFS Iteratif: \";\n    dfsIterative(0);\n    std::cout \u003C\u003C \"\\n\";\n\n    return 0;\n}\n",[22,316,317,321,348,352,375,379,395,414,431,454,479,496,513,517,521,525,540,544,549,554,559,564,568,573,578,582,587,592,597,602,606,611,616,621,626,630,635,640,645,650,654,659,664,668,673,678,683,687,692,697,703,709,715,721,727,733,739,744,749,754,760,766,772,778,783,789,795,801,807,813,819,825,830,836,842,854,859,865,871,880,885,891],{"__ignoreMap":20},[25,318,319],{"class":27,"line":28},[25,320,38],{"emptyLinePlaceholder":37},[25,322,323,327,331,333,336,339,342,345],{"class":27,"line":34},[25,324,326],{"class":325},"sEiGg","**",[25,328,330],{"class":329},"suVJd","Tujuan",[25,332,326],{"class":325},[25,334,335],{"class":329},": Jelajahi graf menggunakan ",[25,337,338],{"class":307},"DFS",[25,340,341],{"class":329}," dari node ",[25,343,344],{"class":307},"A",[25,346,347],{"class":329},".\n",[25,349,350],{"class":27,"line":41},[25,351,38],{"emptyLinePlaceholder":37},[25,353,354,356,359,363,366,368,371],{"class":27,"line":47},[25,355,326],{"class":325},[25,357,358],{"class":329},"Urutan ",[25,360,362],{"class":361},"s9E-l","Penjelajahan",[25,364,365],{"class":329}," (Output)",[25,367,326],{"class":325},[25,369,370],{"class":329},": ",[25,372,374],{"class":373},"sYTnl","`A, B, D, E, C, F`\n",[25,376,377],{"class":27,"line":52},[25,378,38],{"emptyLinePlaceholder":37},[25,380,381,384,387,390,392],{"class":27,"line":58},[25,382,383],{"class":329},"Langkah",[25,385,386],{"class":325},"-",[25,388,389],{"class":329},"langkah ",[25,391,338],{"class":361},[25,393,394],{"class":329},":\n",[25,396,397,400,403,406,408,411],{"class":27,"line":63},[25,398,399],{"class":307},"1.",[25,401,402],{"class":361}," DFS",[25,404,405],{"class":329},"(",[25,407,344],{"class":307},[25,409,410],{"class":329},") → ",[25,412,413],{"class":373},"`A`\n",[25,415,416,419,421,423,426,428],{"class":27,"line":69},[25,417,418],{"class":307},"2.",[25,420,402],{"class":361},[25,422,405],{"class":329},[25,424,425],{"class":307},"B",[25,427,410],{"class":329},[25,429,430],{"class":373},"`B`\n",[25,432,433,436,438,440,443,445,448,451],{"class":27,"line":74},[25,434,435],{"class":307},"3.",[25,437,402],{"class":361},[25,439,405],{"class":329},[25,441,442],{"class":307},"D",[25,444,410],{"class":329},[25,446,447],{"class":373},"`D`",[25,449,450],{"class":329}," → backtrack ke ",[25,452,453],{"class":307},"B\n",[25,455,456,459,461,463,466,468,471,473,475,477],{"class":27,"line":80},[25,457,458],{"class":307},"4.",[25,460,402],{"class":361},[25,462,405],{"class":329},[25,464,465],{"class":307},"E",[25,467,410],{"class":329},[25,469,470],{"class":373},"`E`",[25,472,450],{"class":329},[25,474,425],{"class":307},[25,476,450],{"class":329},[25,478,299],{"class":307},[25,480,481,484,486,488,491,493],{"class":27,"line":85},[25,482,483],{"class":307},"5.",[25,485,402],{"class":361},[25,487,405],{"class":329},[25,489,490],{"class":307},"C",[25,492,410],{"class":329},[25,494,495],{"class":373},"`C`\n",[25,497,498,501,503,505,508,510],{"class":27,"line":91},[25,499,500],{"class":307},"6.",[25,502,402],{"class":361},[25,504,405],{"class":329},[25,506,507],{"class":307},"F",[25,509,410],{"class":329},[25,511,512],{"class":373},"`F`\n",[25,514,515],{"class":27,"line":96},[25,516,38],{"emptyLinePlaceholder":37},[25,518,519],{"class":27,"line":102},[25,520,66],{"class":325},[25,522,523],{"class":27,"line":108},[25,524,38],{"emptyLinePlaceholder":37},[25,526,527,530,532,535,537],{"class":27,"line":114},[25,528,529],{"class":329},"## Implementasi ",[25,531,338],{"class":307},[25,533,534],{"class":329}," dalam ",[25,536,490],{"class":307},[25,538,539],{"class":325},"++\n",[25,541,542],{"class":27,"line":120},[25,543,38],{"emptyLinePlaceholder":37},[25,545,546],{"class":27,"line":126},[25,547,548],{"class":373},"```cpp\n",[25,550,551],{"class":27,"line":132},[25,552,553],{"class":373},"#include \u003Ciostream>\n",[25,555,556],{"class":27,"line":137},[25,557,558],{"class":373},"#include \u003Cvector>\n",[25,560,561],{"class":27,"line":142},[25,562,563],{"class":373},"#include \u003Cstack>\n",[25,565,566],{"class":27,"line":147},[25,567,38],{"emptyLinePlaceholder":37},[25,569,570],{"class":27,"line":153},[25,571,572],{"class":373},"std::vector\u003Cstd::vector\u003Cint>> adj;\n",[25,574,575],{"class":27,"line":158},[25,576,577],{"class":373},"std::vector\u003Cbool> visited;\n",[25,579,580],{"class":27,"line":164},[25,581,38],{"emptyLinePlaceholder":37},[25,583,584],{"class":27,"line":169},[25,585,586],{"class":373},"// DFS Rekursif\n",[25,588,589],{"class":27,"line":175},[25,590,591],{"class":373},"void dfsRecursive(int u) {\n",[25,593,594],{"class":27,"line":180},[25,595,596],{"class":373},"    visited[u] = true;\n",[25,598,599],{"class":27,"line":186},[25,600,601],{"class":373},"    std::cout \u003C\u003C u \u003C\u003C \" \";\n",[25,603,604],{"class":27,"line":192},[25,605,38],{"emptyLinePlaceholder":37},[25,607,608],{"class":27,"line":198},[25,609,610],{"class":373},"    for (int v : adj[u]) {\n",[25,612,613],{"class":27,"line":203},[25,614,615],{"class":373},"        if (!visited[v]) dfsRecursive(v);\n",[25,617,618],{"class":27,"line":209},[25,619,620],{"class":373},"    }\n",[25,622,623],{"class":27,"line":214},[25,624,625],{"class":373},"}\n",[25,627,628],{"class":27,"line":220},[25,629,38],{"emptyLinePlaceholder":37},[25,631,632],{"class":27,"line":226},[25,633,634],{"class":373},"// DFS Iteratif\n",[25,636,637],{"class":27,"line":232},[25,638,639],{"class":373},"void dfsIterative(int startNode) {\n",[25,641,642],{"class":27,"line":238},[25,643,644],{"class":373},"    std::vector\u003Cbool> localVisited(adj.size(), false);\n",[25,646,647],{"class":27,"line":244},[25,648,649],{"class":373},"    std::stack\u003Cint> s;\n",[25,651,652],{"class":27,"line":249},[25,653,38],{"emptyLinePlaceholder":37},[25,655,656],{"class":27,"line":255},[25,657,658],{"class":373},"    s.push(startNode);\n",[25,660,661],{"class":27,"line":260},[25,662,663],{"class":373},"    localVisited[startNode] = true;\n",[25,665,666],{"class":27,"line":266},[25,667,38],{"emptyLinePlaceholder":37},[25,669,670],{"class":27,"line":271},[25,671,672],{"class":373},"    while (!s.empty()) {\n",[25,674,675],{"class":27,"line":276},[25,676,677],{"class":373},"        int u = s.top();\n",[25,679,680],{"class":27,"line":281},[25,681,682],{"class":373},"        s.pop();\n",[25,684,685],{"class":27,"line":287},[25,686,38],{"emptyLinePlaceholder":37},[25,688,689],{"class":27,"line":292},[25,690,691],{"class":373},"        std::cout \u003C\u003C u \u003C\u003C \" \";\n",[25,693,695],{"class":27,"line":694},49,[25,696,38],{"emptyLinePlaceholder":37},[25,698,700],{"class":27,"line":699},50,[25,701,702],{"class":373},"        for (int i = adj[u].size() - 1; i >= 0; --i) {\n",[25,704,706],{"class":27,"line":705},51,[25,707,708],{"class":373},"            int v = adj[u][i];\n",[25,710,712],{"class":27,"line":711},52,[25,713,714],{"class":373},"            if (!localVisited[v]) {\n",[25,716,718],{"class":27,"line":717},53,[25,719,720],{"class":373},"                localVisited[v] = true;\n",[25,722,724],{"class":27,"line":723},54,[25,725,726],{"class":373},"                s.push(v);\n",[25,728,730],{"class":27,"line":729},55,[25,731,732],{"class":373},"            }\n",[25,734,736],{"class":27,"line":735},56,[25,737,738],{"class":373},"        }\n",[25,740,742],{"class":27,"line":741},57,[25,743,620],{"class":373},[25,745,747],{"class":27,"line":746},58,[25,748,625],{"class":373},[25,750,752],{"class":27,"line":751},59,[25,753,38],{"emptyLinePlaceholder":37},[25,755,757],{"class":27,"line":756},60,[25,758,759],{"class":373},"int main() {\n",[25,761,763],{"class":27,"line":762},61,[25,764,765],{"class":373},"    int numNodes = 6; // A=0, B=1, C=2, D=3, E=4, F=5\n",[25,767,769],{"class":27,"line":768},62,[25,770,771],{"class":373},"    adj.resize(numNodes);\n",[25,773,775],{"class":27,"line":774},63,[25,776,777],{"class":373},"    visited.resize(numNodes, false);\n",[25,779,781],{"class":27,"line":780},64,[25,782,38],{"emptyLinePlaceholder":37},[25,784,786],{"class":27,"line":785},65,[25,787,788],{"class":373},"    // Menyusun graf tidak berarah\n",[25,790,792],{"class":27,"line":791},66,[25,793,794],{"class":373},"    adj[0] = {1, 2}; // A → B, C\n",[25,796,798],{"class":27,"line":797},67,[25,799,800],{"class":373},"    adj[1] = {0, 3, 4}; // B → A, D, E\n",[25,802,804],{"class":27,"line":803},68,[25,805,806],{"class":373},"    adj[2] = {0, 5}; // C → A, F\n",[25,808,810],{"class":27,"line":809},69,[25,811,812],{"class":373},"    adj[3] = {1}; // D → B\n",[25,814,816],{"class":27,"line":815},70,[25,817,818],{"class":373},"    adj[4] = {1}; // E → B\n",[25,820,822],{"class":27,"line":821},71,[25,823,824],{"class":373},"    adj[5] = {2}; // F → C\n",[25,826,828],{"class":27,"line":827},72,[25,829,38],{"emptyLinePlaceholder":37},[25,831,833],{"class":27,"line":832},73,[25,834,835],{"class":373},"    std::cout \u003C\u003C \"DFS Rekursif: \";\n",[25,837,839],{"class":27,"line":838},74,[25,840,841],{"class":373},"    dfsRecursive(0);\n",[25,843,845,848,851],{"class":27,"line":844},75,[25,846,847],{"class":373},"    std::cout \u003C\u003C \"",[25,849,850],{"class":307},"\\n",[25,852,853],{"class":373},"\";\n",[25,855,857],{"class":27,"line":856},76,[25,858,38],{"emptyLinePlaceholder":37},[25,860,862],{"class":27,"line":861},77,[25,863,864],{"class":373},"    std::cout \u003C\u003C \"DFS Iteratif: \";\n",[25,866,868],{"class":27,"line":867},78,[25,869,870],{"class":373},"    dfsIterative(0);\n",[25,872,874,876,878],{"class":27,"line":873},79,[25,875,847],{"class":373},[25,877,850],{"class":307},[25,879,853],{"class":373},[25,881,883],{"class":27,"line":882},80,[25,884,38],{"emptyLinePlaceholder":37},[25,886,888],{"class":27,"line":887},81,[25,889,890],{"class":373},"    return 0;\n",[25,892,894],{"class":27,"line":893},82,[25,895,625],{"class":373},[897,898,900],"h2",{"id":899},"kelebihan-dan-kekurangan","Kelebihan dan Kekurangan",[902,903,905],"h3",{"id":904},"kelebihan-dfs","✅ Kelebihan DFS:",[907,908,909,917,923,937],"ul",{},[910,911,912,916],"li",{},[913,914,915],"strong",{},"Sederhana & Efisien",": Mudah diimplementasikan.",[910,918,919,922],{},[913,920,921],{},"Memori rendah"," untuk graf luas dan dangkal.",[910,924,925,926],{},"Cocok untuk:\n",[907,927,928,931,934],{},[910,929,930],{},"Deteksi siklus",[910,932,933],{},"Pengurutan topologis",[910,935,936],{},"Komponen terhubung",[910,938,939,940,943],{},"Dapat menemukan ",[913,941,942],{},"salah satu jalur"," antara dua node.",[902,945,947],{"id":946},"kekurangan-dfs","❌ Kekurangan DFS:",[907,949,950,957,968],{},[910,951,952,953,956],{},"❌ ",[913,954,955],{},"Tidak optimal"," untuk jalur terpendek.",[910,958,959,960,963,964,967],{},"❌ Bisa masuk ",[913,961,962],{},"loop tak terbatas"," jika tidak ada ",[22,965,966],{},"visited",".",[910,969,970],{},"❌ Tidak cocok untuk graf berbobot negatif.",[972,973,974],"blockquote",{},[309,975,976,977,967],{},"Kompleksitas waktu DFS adalah ",[913,978,979],{},"O(V + E)",[897,981,983],{"id":982},"kesimpulan","Kesimpulan",[309,985,986],{},"Algoritma DFS adalah salah satu teknik dasar namun sangat powerful dalam pemrosesan graf. Cocok untuk berbagai aplikasi dari penelusuran, analisis struktur, hingga penyelesaian puzzle.",[972,988,989],{},[309,990,991],{},"⚙️ Meskipun tidak cocok untuk semua jenis masalah (seperti jalur terpendek), DFS wajib dikuasai oleh siapa pun yang mempelajari algoritma dan struktur data.",[993,994,995],"style",{},"html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html pre.shiki code .sAPL1, html code.shiki .sAPL1{--shiki-dark:#79B8FF;--shiki-default:#79B8FF;--shiki-light:#005CC5}html pre.shiki code .sEiGg, html code.shiki .sEiGg{--shiki-dark:#F97583;--shiki-default:#F97583;--shiki-light:#D73A49}html pre.shiki code .suVJd, html code.shiki .suVJd{--shiki-dark:#E1E4E8;--shiki-default:#E1E4E8;--shiki-light:#24292E}html pre.shiki code .s9E-l, html code.shiki .s9E-l{--shiki-dark:#B392F0;--shiki-default:#B392F0;--shiki-light:#6F42C1}html pre.shiki code .sYTnl, html code.shiki .sYTnl{--shiki-dark:#9ECBFF;--shiki-default:#9ECBFF;--shiki-light:#032F62}",{"title":20,"searchDepth":34,"depth":34,"links":997},[998,1002],{"id":899,"depth":34,"text":900,"children":999},[1000,1001],{"id":904,"depth":41,"text":905},{"id":946,"depth":41,"text":947},{"id":982,"depth":34,"text":983},null,"Selami dunia penjelajahan grafik secara mendalam.","md",{"script":1007},[1008],{"type":1009,"key":1010,"data-nuxt-schema-org":37,"nodes":1011},"application/ld+json","schema-org-graph",[1012],{"_resolver":1013},"webPage","/articles/3.jpeg",{},{"props":1017},{},"/en/articles/deapth-first-search-bfs",{"_resolver":1013},{"title":5,"description":1004},{"loc":1018,"videos":1022,"images":1023,"lastmod":1024},[],[],"2025-06-13T00:00:00.000Z","en/articles/deapth-first-search-bfs",[],"PRLUwJCHIwxOhRQZ83Ee9JFTOqjadPgbqRHNwXyGeeg",1750332525199]