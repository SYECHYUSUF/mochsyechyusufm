[{"data":1,"prerenderedAt":1033},["ShallowReactive",2],{"/en/articles/deapth-first-search-bfs":3},{"id":4,"title":5,"body":6,"date":1009,"description":1010,"extension":19,"head":1011,"image":1019,"meta":1020,"navigation":38,"ogImage":1021,"path":1023,"readingTime":1009,"robots":1009,"schemaOrg":1024,"seo":1025,"sitemap":1026,"stem":1030,"tags":1031,"__hash__":1032},"articles_en/en/articles/deapth-first-search-bfs.md","Memahami Algoritma Depth-First Search (DFS)",{"type":7,"value":8,"toc":1002},"minimal",[9,14,413,422,426,902,907,912,950,954,977,986,990,993,998],[10,11,13],"h1",{"id":12},"deapth-first-search-bfs","DEAPTH FIRST SEARCH (BFS)",[15,16,21],"pre",{"className":17,"code":18,"language":19,"meta":20,"style":20},"language-md shiki shiki-themes github-dark github-dark github-light","# Apa itu Algoritma Depth-First Search (DFS)?\n\n**Depth-First Search (DFS)** adalah algoritma untuk melintasi atau mencari elemen dalam struktur data seperti **pohon** atau **grafik**. DFS memulai penelusuran dari node akar (atau node yang dipilih) dan menjelajah sejauh mungkin di sepanjang setiap cabang sebelum melakukan *backtrack*.\n\n> 🎯 Analoginya seperti menjelajah labirin: ikuti satu jalan hingga mentok, lalu kembali ke percabangan sebelumnya dan coba jalur lain.\n\n---\n\n## Aplikasi DFS\n\nDFS digunakan dalam berbagai bidang ilmu komputer, di antaranya:\n\n- 🔍 **Pencarian jalur**: Menemukan rute antara dua simpul dalam graf.\n- 🔁 **Deteksi siklus**: Mengidentifikasi apakah graf mengandung siklus.\n- 📊 **Pengurutan topologis**: Alternatif untuk Algoritma Kahn.\n- 🔗 **Menemukan komponen terhubung** dalam graf tak berarah.\n- 🧩 **Penyelesaian puzzle**: Contohnya Sudoku atau labirin.\n- 🌐 **Analisis jaringan**: Menjelajahi struktur koneksi.\n\n---\n\n## Cara Kerja Algoritma DFS\n\nDFS dapat diimplementasikan secara **rekursif** atau **iteratif menggunakan stack**.\n\n### 1. Inisialisasi:\n\n- Buat `visited[]` untuk menandai node yang sudah dikunjungi.\n- Mulai dari `start node`.\n- Tandai node sebagai dikunjungi.\n\n### 2. Penjelajahan:\n\n- Ambil node dari stack atau parameter rekursif.\n- Proses node (misalnya: cetak, simpan).\n- Untuk setiap tetangga yang belum dikunjungi:\n  - Tandai sebagai dikunjungi.\n  - Tambahkan ke stack atau panggil DFS secara rekursif.\n\n### 3. Backtracking:\n\n- Jika semua tetangga sudah dikunjungi, kembali ke node sebelumnya.\n\n---\n\n## Contoh Kasus\n\nGrafik:\n","md","",[22,23,24,33,40,70,75,82,87,93,98,104,109,115,120,136,150,164,178,192,206,211,216,221,227,232,248,253,259,264,279,292,300,305,311,316,324,332,340,349,357,362,368,373,381,386,391,396,402,407],"code",{"__ignoreMap":20},[25,26,29],"span",{"class":27,"line":28},"line",1,[25,30,32],{"class":31},"sXvaJ","# Apa itu Algoritma Depth-First Search (DFS)?\n",[25,34,36],{"class":27,"line":35},2,[25,37,39],{"emptyLinePlaceholder":38},true,"\n",[25,41,43,47,51,54,57,60,63,67],{"class":27,"line":42},3,[25,44,46],{"class":45},"s9_AW","**Depth-First Search (DFS)**",[25,48,50],{"class":49},"suVJd"," adalah algoritma untuk melintasi atau mencari elemen dalam struktur data seperti ",[25,52,53],{"class":45},"**pohon**",[25,55,56],{"class":49}," atau ",[25,58,59],{"class":45},"**grafik**",[25,61,62],{"class":49},". DFS memulai penelusuran dari node akar (atau node yang dipilih) dan menjelajah sejauh mungkin di sepanjang setiap cabang sebelum melakukan ",[25,64,66],{"class":65},"sszsK","*backtrack*",[25,68,69],{"class":49},".\n",[25,71,73],{"class":27,"line":72},4,[25,74,39],{"emptyLinePlaceholder":38},[25,76,78],{"class":27,"line":77},5,[25,79,81],{"class":80},"scWFE","> 🎯 Analoginya seperti menjelajah labirin: ikuti satu jalan hingga mentok, lalu kembali ke percabangan sebelumnya dan coba jalur lain.\n",[25,83,85],{"class":27,"line":84},6,[25,86,39],{"emptyLinePlaceholder":38},[25,88,90],{"class":27,"line":89},7,[25,91,92],{"class":31},"---\n",[25,94,96],{"class":27,"line":95},8,[25,97,39],{"emptyLinePlaceholder":38},[25,99,101],{"class":27,"line":100},9,[25,102,103],{"class":31},"## Aplikasi DFS\n",[25,105,107],{"class":27,"line":106},10,[25,108,39],{"emptyLinePlaceholder":38},[25,110,112],{"class":27,"line":111},11,[25,113,114],{"class":49},"DFS digunakan dalam berbagai bidang ilmu komputer, di antaranya:\n",[25,116,118],{"class":27,"line":117},12,[25,119,39],{"emptyLinePlaceholder":38},[25,121,123,127,130,133],{"class":27,"line":122},13,[25,124,126],{"class":125},"s1uPE","-",[25,128,129],{"class":49}," 🔍 ",[25,131,132],{"class":45},"**Pencarian jalur**",[25,134,135],{"class":49},": Menemukan rute antara dua simpul dalam graf.\n",[25,137,139,141,144,147],{"class":27,"line":138},14,[25,140,126],{"class":125},[25,142,143],{"class":49}," 🔁 ",[25,145,146],{"class":45},"**Deteksi siklus**",[25,148,149],{"class":49},": Mengidentifikasi apakah graf mengandung siklus.\n",[25,151,153,155,158,161],{"class":27,"line":152},15,[25,154,126],{"class":125},[25,156,157],{"class":49}," 📊 ",[25,159,160],{"class":45},"**Pengurutan topologis**",[25,162,163],{"class":49},": Alternatif untuk Algoritma Kahn.\n",[25,165,167,169,172,175],{"class":27,"line":166},16,[25,168,126],{"class":125},[25,170,171],{"class":49}," 🔗 ",[25,173,174],{"class":45},"**Menemukan komponen terhubung**",[25,176,177],{"class":49}," dalam graf tak berarah.\n",[25,179,181,183,186,189],{"class":27,"line":180},17,[25,182,126],{"class":125},[25,184,185],{"class":49}," 🧩 ",[25,187,188],{"class":45},"**Penyelesaian puzzle**",[25,190,191],{"class":49},": Contohnya Sudoku atau labirin.\n",[25,193,195,197,200,203],{"class":27,"line":194},18,[25,196,126],{"class":125},[25,198,199],{"class":49}," 🌐 ",[25,201,202],{"class":45},"**Analisis jaringan**",[25,204,205],{"class":49},": Menjelajahi struktur koneksi.\n",[25,207,209],{"class":27,"line":208},19,[25,210,39],{"emptyLinePlaceholder":38},[25,212,214],{"class":27,"line":213},20,[25,215,92],{"class":31},[25,217,219],{"class":27,"line":218},21,[25,220,39],{"emptyLinePlaceholder":38},[25,222,224],{"class":27,"line":223},22,[25,225,226],{"class":31},"## Cara Kerja Algoritma DFS\n",[25,228,230],{"class":27,"line":229},23,[25,231,39],{"emptyLinePlaceholder":38},[25,233,235,238,241,243,246],{"class":27,"line":234},24,[25,236,237],{"class":49},"DFS dapat diimplementasikan secara ",[25,239,240],{"class":45},"**rekursif**",[25,242,56],{"class":49},[25,244,245],{"class":45},"**iteratif menggunakan stack**",[25,247,69],{"class":49},[25,249,251],{"class":27,"line":250},25,[25,252,39],{"emptyLinePlaceholder":38},[25,254,256],{"class":27,"line":255},26,[25,257,258],{"class":31},"### 1. Inisialisasi:\n",[25,260,262],{"class":27,"line":261},27,[25,263,39],{"emptyLinePlaceholder":38},[25,265,267,269,272,276],{"class":27,"line":266},28,[25,268,126],{"class":125},[25,270,271],{"class":49}," Buat ",[25,273,275],{"class":274},"sAPL1","`visited[]`",[25,277,278],{"class":49}," untuk menandai node yang sudah dikunjungi.\n",[25,280,282,284,287,290],{"class":27,"line":281},29,[25,283,126],{"class":125},[25,285,286],{"class":49}," Mulai dari ",[25,288,289],{"class":274},"`start node`",[25,291,69],{"class":49},[25,293,295,297],{"class":27,"line":294},30,[25,296,126],{"class":125},[25,298,299],{"class":49}," Tandai node sebagai dikunjungi.\n",[25,301,303],{"class":27,"line":302},31,[25,304,39],{"emptyLinePlaceholder":38},[25,306,308],{"class":27,"line":307},32,[25,309,310],{"class":31},"### 2. Penjelajahan:\n",[25,312,314],{"class":27,"line":313},33,[25,315,39],{"emptyLinePlaceholder":38},[25,317,319,321],{"class":27,"line":318},34,[25,320,126],{"class":125},[25,322,323],{"class":49}," Ambil node dari stack atau parameter rekursif.\n",[25,325,327,329],{"class":27,"line":326},35,[25,328,126],{"class":125},[25,330,331],{"class":49}," Proses node (misalnya: cetak, simpan).\n",[25,333,335,337],{"class":27,"line":334},36,[25,336,126],{"class":125},[25,338,339],{"class":49}," Untuk setiap tetangga yang belum dikunjungi:\n",[25,341,343,346],{"class":27,"line":342},37,[25,344,345],{"class":125},"  -",[25,347,348],{"class":49}," Tandai sebagai dikunjungi.\n",[25,350,352,354],{"class":27,"line":351},38,[25,353,345],{"class":125},[25,355,356],{"class":49}," Tambahkan ke stack atau panggil DFS secara rekursif.\n",[25,358,360],{"class":27,"line":359},39,[25,361,39],{"emptyLinePlaceholder":38},[25,363,365],{"class":27,"line":364},40,[25,366,367],{"class":31},"### 3. Backtracking:\n",[25,369,371],{"class":27,"line":370},41,[25,372,39],{"emptyLinePlaceholder":38},[25,374,376,378],{"class":27,"line":375},42,[25,377,126],{"class":125},[25,379,380],{"class":49}," Jika semua tetangga sudah dikunjungi, kembali ke node sebelumnya.\n",[25,382,384],{"class":27,"line":383},43,[25,385,39],{"emptyLinePlaceholder":38},[25,387,389],{"class":27,"line":388},44,[25,390,92],{"class":31},[25,392,394],{"class":27,"line":393},45,[25,395,39],{"emptyLinePlaceholder":38},[25,397,399],{"class":27,"line":398},46,[25,400,401],{"class":31},"## Contoh Kasus\n",[25,403,405],{"class":27,"line":404},47,[25,406,39],{"emptyLinePlaceholder":38},[25,408,410],{"class":27,"line":409},48,[25,411,412],{"class":49},"Grafik:\n",[15,414,416],{"className":17,"code":415,"language":19,"meta":20,"style":20},"A\n",[22,417,418],{"__ignoreMap":20},[25,419,420],{"class":27,"line":28},[25,421,415],{"class":49},[423,424,425],"p",{},"/ B C / \\ D E F",[15,427,429],{"className":17,"code":428,"language":19,"meta":20,"style":20},"\n**Tujuan**: Jelajahi graf menggunakan DFS dari node A.\n\n**Urutan Penjelajahan (Output)**: `A, B, D, E, C, F`\n\nLangkah-langkah DFS:\n1. DFS(A) → `A`\n2. DFS(B) → `B`\n3. DFS(D) → `D` → backtrack ke B\n4. DFS(E) → `E` → backtrack ke B → backtrack ke A\n5. DFS(C) → `C`\n6. DFS(F) → `F`\n\n---\n\n## Implementasi DFS dalam C++\n\n```cpp\n#include \u003Ciostream>\n#include \u003Cvector>\n#include \u003Cstack>\n\nstd::vector\u003Cstd::vector\u003Cint>> adj;\nstd::vector\u003Cbool> visited;\n\n// DFS Rekursif\nvoid dfsRecursive(int u) {\n    visited[u] = true;\n    std::cout \u003C\u003C u \u003C\u003C \" \";\n\n    for (int v : adj[u]) {\n        if (!visited[v]) dfsRecursive(v);\n    }\n}\n\n// DFS Iteratif\nvoid dfsIterative(int startNode) {\n    std::vector\u003Cbool> localVisited(adj.size(), false);\n    std::stack\u003Cint> s;\n\n    s.push(startNode);\n    localVisited[startNode] = true;\n\n    while (!s.empty()) {\n        int u = s.top();\n        s.pop();\n\n        std::cout \u003C\u003C u \u003C\u003C \" \";\n\n        for (int i = adj[u].size() - 1; i >= 0; --i) {\n            int v = adj[u][i];\n            if (!localVisited[v]) {\n                localVisited[v] = true;\n                s.push(v);\n            }\n        }\n    }\n}\n\nint main() {\n    int numNodes = 6; // A=0, B=1, C=2, D=3, E=4, F=5\n    adj.resize(numNodes);\n    visited.resize(numNodes, false);\n\n    // Menyusun graf tidak berarah\n    adj[0] = {1, 2}; // A → B, C\n    adj[1] = {0, 3, 4}; // B → A, D, E\n    adj[2] = {0, 5}; // C → A, F\n    adj[3] = {1}; // D → B\n    adj[4] = {1}; // E → B\n    adj[5] = {2}; // F → C\n\n    std::cout \u003C\u003C \"DFS Rekursif: \";\n    dfsRecursive(0);\n    std::cout \u003C\u003C \"\\n\";\n\n    std::cout \u003C\u003C \"DFS Iteratif: \";\n    dfsIterative(0);\n    std::cout \u003C\u003C \"\\n\";\n\n    return 0;\n}\n",[22,430,431,435,443,447,458,462,467,478,489,503,517,528,539,543,547,551,556,560,565,570,575,580,584,589,594,598,603,608,613,618,622,627,632,637,642,646,651,656,661,666,670,675,680,684,689,694,699,703,708,713,719,725,731,737,743,749,755,760,765,770,776,782,788,794,799,805,811,817,823,829,835,841,846,852,858,864,869,875,881,886,891,897],{"__ignoreMap":20},[25,432,433],{"class":27,"line":28},[25,434,39],{"emptyLinePlaceholder":38},[25,436,437,440],{"class":27,"line":35},[25,438,439],{"class":45},"**Tujuan**",[25,441,442],{"class":49},": Jelajahi graf menggunakan DFS dari node A.\n",[25,444,445],{"class":27,"line":42},[25,446,39],{"emptyLinePlaceholder":38},[25,448,449,452,455],{"class":27,"line":72},[25,450,451],{"class":45},"**Urutan Penjelajahan (Output)**",[25,453,454],{"class":49},": ",[25,456,457],{"class":274},"`A, B, D, E, C, F`\n",[25,459,460],{"class":27,"line":77},[25,461,39],{"emptyLinePlaceholder":38},[25,463,464],{"class":27,"line":84},[25,465,466],{"class":49},"Langkah-langkah DFS:\n",[25,468,469,472,475],{"class":27,"line":89},[25,470,471],{"class":125},"1.",[25,473,474],{"class":49}," DFS(A) → ",[25,476,477],{"class":274},"`A`\n",[25,479,480,483,486],{"class":27,"line":95},[25,481,482],{"class":125},"2.",[25,484,485],{"class":49}," DFS(B) → ",[25,487,488],{"class":274},"`B`\n",[25,490,491,494,497,500],{"class":27,"line":100},[25,492,493],{"class":125},"3.",[25,495,496],{"class":49}," DFS(D) → ",[25,498,499],{"class":274},"`D`",[25,501,502],{"class":49}," → backtrack ke B\n",[25,504,505,508,511,514],{"class":27,"line":106},[25,506,507],{"class":125},"4.",[25,509,510],{"class":49}," DFS(E) → ",[25,512,513],{"class":274},"`E`",[25,515,516],{"class":49}," → backtrack ke B → backtrack ke A\n",[25,518,519,522,525],{"class":27,"line":111},[25,520,521],{"class":125},"5.",[25,523,524],{"class":49}," DFS(C) → ",[25,526,527],{"class":274},"`C`\n",[25,529,530,533,536],{"class":27,"line":117},[25,531,532],{"class":125},"6.",[25,534,535],{"class":49}," DFS(F) → ",[25,537,538],{"class":274},"`F`\n",[25,540,541],{"class":27,"line":122},[25,542,39],{"emptyLinePlaceholder":38},[25,544,545],{"class":27,"line":138},[25,546,92],{"class":31},[25,548,549],{"class":27,"line":152},[25,550,39],{"emptyLinePlaceholder":38},[25,552,553],{"class":27,"line":166},[25,554,555],{"class":31},"## Implementasi DFS dalam C++\n",[25,557,558],{"class":27,"line":180},[25,559,39],{"emptyLinePlaceholder":38},[25,561,562],{"class":27,"line":194},[25,563,564],{"class":49},"```cpp\n",[25,566,567],{"class":27,"line":208},[25,568,569],{"class":49},"#include \u003Ciostream>\n",[25,571,572],{"class":27,"line":213},[25,573,574],{"class":49},"#include \u003Cvector>\n",[25,576,577],{"class":27,"line":218},[25,578,579],{"class":49},"#include \u003Cstack>\n",[25,581,582],{"class":27,"line":223},[25,583,39],{"emptyLinePlaceholder":38},[25,585,586],{"class":27,"line":229},[25,587,588],{"class":49},"std::vector\u003Cstd::vector\u003Cint>> adj;\n",[25,590,591],{"class":27,"line":234},[25,592,593],{"class":49},"std::vector\u003Cbool> visited;\n",[25,595,596],{"class":27,"line":250},[25,597,39],{"emptyLinePlaceholder":38},[25,599,600],{"class":27,"line":255},[25,601,602],{"class":49},"// DFS Rekursif\n",[25,604,605],{"class":27,"line":261},[25,606,607],{"class":49},"void dfsRecursive(int u) {\n",[25,609,610],{"class":27,"line":266},[25,611,612],{"class":49},"    visited[u] = true;\n",[25,614,615],{"class":27,"line":281},[25,616,617],{"class":49},"    std::cout \u003C\u003C u \u003C\u003C \" \";\n",[25,619,620],{"class":27,"line":294},[25,621,39],{"emptyLinePlaceholder":38},[25,623,624],{"class":27,"line":302},[25,625,626],{"class":49},"    for (int v : adj[u]) {\n",[25,628,629],{"class":27,"line":307},[25,630,631],{"class":49},"        if (!visited[v]) dfsRecursive(v);\n",[25,633,634],{"class":27,"line":313},[25,635,636],{"class":49},"    }\n",[25,638,639],{"class":27,"line":318},[25,640,641],{"class":49},"}\n",[25,643,644],{"class":27,"line":326},[25,645,39],{"emptyLinePlaceholder":38},[25,647,648],{"class":27,"line":334},[25,649,650],{"class":49},"// DFS Iteratif\n",[25,652,653],{"class":27,"line":342},[25,654,655],{"class":49},"void dfsIterative(int startNode) {\n",[25,657,658],{"class":27,"line":351},[25,659,660],{"class":49},"    std::vector\u003Cbool> localVisited(adj.size(), false);\n",[25,662,663],{"class":27,"line":359},[25,664,665],{"class":49},"    std::stack\u003Cint> s;\n",[25,667,668],{"class":27,"line":364},[25,669,39],{"emptyLinePlaceholder":38},[25,671,672],{"class":27,"line":370},[25,673,674],{"class":49},"    s.push(startNode);\n",[25,676,677],{"class":27,"line":375},[25,678,679],{"class":49},"    localVisited[startNode] = true;\n",[25,681,682],{"class":27,"line":383},[25,683,39],{"emptyLinePlaceholder":38},[25,685,686],{"class":27,"line":388},[25,687,688],{"class":49},"    while (!s.empty()) {\n",[25,690,691],{"class":27,"line":393},[25,692,693],{"class":49},"        int u = s.top();\n",[25,695,696],{"class":27,"line":398},[25,697,698],{"class":49},"        s.pop();\n",[25,700,701],{"class":27,"line":404},[25,702,39],{"emptyLinePlaceholder":38},[25,704,705],{"class":27,"line":409},[25,706,707],{"class":49},"        std::cout \u003C\u003C u \u003C\u003C \" \";\n",[25,709,711],{"class":27,"line":710},49,[25,712,39],{"emptyLinePlaceholder":38},[25,714,716],{"class":27,"line":715},50,[25,717,718],{"class":49},"        for (int i = adj[u].size() - 1; i >= 0; --i) {\n",[25,720,722],{"class":27,"line":721},51,[25,723,724],{"class":49},"            int v = adj[u][i];\n",[25,726,728],{"class":27,"line":727},52,[25,729,730],{"class":49},"            if (!localVisited[v]) {\n",[25,732,734],{"class":27,"line":733},53,[25,735,736],{"class":49},"                localVisited[v] = true;\n",[25,738,740],{"class":27,"line":739},54,[25,741,742],{"class":49},"                s.push(v);\n",[25,744,746],{"class":27,"line":745},55,[25,747,748],{"class":49},"            }\n",[25,750,752],{"class":27,"line":751},56,[25,753,754],{"class":49},"        }\n",[25,756,758],{"class":27,"line":757},57,[25,759,636],{"class":49},[25,761,763],{"class":27,"line":762},58,[25,764,641],{"class":49},[25,766,768],{"class":27,"line":767},59,[25,769,39],{"emptyLinePlaceholder":38},[25,771,773],{"class":27,"line":772},60,[25,774,775],{"class":49},"int main() {\n",[25,777,779],{"class":27,"line":778},61,[25,780,781],{"class":49},"    int numNodes = 6; // A=0, B=1, C=2, D=3, E=4, F=5\n",[25,783,785],{"class":27,"line":784},62,[25,786,787],{"class":49},"    adj.resize(numNodes);\n",[25,789,791],{"class":27,"line":790},63,[25,792,793],{"class":49},"    visited.resize(numNodes, false);\n",[25,795,797],{"class":27,"line":796},64,[25,798,39],{"emptyLinePlaceholder":38},[25,800,802],{"class":27,"line":801},65,[25,803,804],{"class":49},"    // Menyusun graf tidak berarah\n",[25,806,808],{"class":27,"line":807},66,[25,809,810],{"class":49},"    adj[0] = {1, 2}; // A → B, C\n",[25,812,814],{"class":27,"line":813},67,[25,815,816],{"class":49},"    adj[1] = {0, 3, 4}; // B → A, D, E\n",[25,818,820],{"class":27,"line":819},68,[25,821,822],{"class":49},"    adj[2] = {0, 5}; // C → A, F\n",[25,824,826],{"class":27,"line":825},69,[25,827,828],{"class":49},"    adj[3] = {1}; // D → B\n",[25,830,832],{"class":27,"line":831},70,[25,833,834],{"class":49},"    adj[4] = {1}; // E → B\n",[25,836,838],{"class":27,"line":837},71,[25,839,840],{"class":49},"    adj[5] = {2}; // F → C\n",[25,842,844],{"class":27,"line":843},72,[25,845,39],{"emptyLinePlaceholder":38},[25,847,849],{"class":27,"line":848},73,[25,850,851],{"class":49},"    std::cout \u003C\u003C \"DFS Rekursif: \";\n",[25,853,855],{"class":27,"line":854},74,[25,856,857],{"class":49},"    dfsRecursive(0);\n",[25,859,861],{"class":27,"line":860},75,[25,862,863],{"class":49},"    std::cout \u003C\u003C \"\\n\";\n",[25,865,867],{"class":27,"line":866},76,[25,868,39],{"emptyLinePlaceholder":38},[25,870,872],{"class":27,"line":871},77,[25,873,874],{"class":49},"    std::cout \u003C\u003C \"DFS Iteratif: \";\n",[25,876,878],{"class":27,"line":877},78,[25,879,880],{"class":49},"    dfsIterative(0);\n",[25,882,884],{"class":27,"line":883},79,[25,885,863],{"class":49},[25,887,889],{"class":27,"line":888},80,[25,890,39],{"emptyLinePlaceholder":38},[25,892,894],{"class":27,"line":893},81,[25,895,896],{"class":49},"    return 0;\n",[25,898,900],{"class":27,"line":899},82,[25,901,641],{"class":49},[903,904,906],"h2",{"id":905},"kelebihan-dan-kekurangan","Kelebihan dan Kekurangan",[908,909,911],"h3",{"id":910},"kelebihan-dfs","✅ Kelebihan DFS:",[913,914,915,923,929,943],"ul",{},[916,917,918,922],"li",{},[919,920,921],"strong",{},"Sederhana & Efisien",": Mudah diimplementasikan.",[916,924,925,928],{},[919,926,927],{},"Memori rendah"," untuk graf luas dan dangkal.",[916,930,931,932],{},"Cocok untuk:\n",[913,933,934,937,940],{},[916,935,936],{},"Deteksi siklus",[916,938,939],{},"Pengurutan topologis",[916,941,942],{},"Komponen terhubung",[916,944,945,946,949],{},"Dapat menemukan ",[919,947,948],{},"salah satu jalur"," antara dua node.",[908,951,953],{"id":952},"kekurangan-dfs","❌ Kekurangan DFS:",[913,955,956,963,974],{},[916,957,958,959,962],{},"❌ ",[919,960,961],{},"Tidak optimal"," untuk jalur terpendek.",[916,964,965,966,969,970,973],{},"❌ Bisa masuk ",[919,967,968],{},"loop tak terbatas"," jika tidak ada ",[22,971,972],{},"visited",".",[916,975,976],{},"❌ Tidak cocok untuk graf berbobot negatif.",[978,979,980],"blockquote",{},[423,981,982,983,973],{},"Kompleksitas waktu DFS adalah ",[919,984,985],{},"O(V + E)",[903,987,989],{"id":988},"kesimpulan","Kesimpulan",[423,991,992],{},"Algoritma DFS adalah salah satu teknik dasar namun sangat powerful dalam pemrosesan graf. Cocok untuk berbagai aplikasi dari penelusuran, analisis struktur, hingga penyelesaian puzzle.",[978,994,995],{},[423,996,997],{},"⚙️ Meskipun tidak cocok untuk semua jenis masalah (seperti jalur terpendek), DFS wajib dikuasai oleh siapa pun yang mempelajari algoritma dan struktur data.",[999,1000,1001],"style",{},"html pre.shiki code .sXvaJ, html code.shiki .sXvaJ{--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;--shiki-default:#79B8FF;--shiki-default-font-weight:bold;--shiki-light:#005CC5;--shiki-light-font-weight:bold}html pre.shiki code .s9_AW, html code.shiki .s9_AW{--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;--shiki-default:#E1E4E8;--shiki-default-font-weight:bold;--shiki-light:#24292E;--shiki-light-font-weight:bold}html pre.shiki code .suVJd, html code.shiki .suVJd{--shiki-dark:#E1E4E8;--shiki-default:#E1E4E8;--shiki-light:#24292E}html pre.shiki code .sszsK, html code.shiki .sszsK{--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;--shiki-default:#E1E4E8;--shiki-default-font-style:italic;--shiki-light:#24292E;--shiki-light-font-style:italic}html pre.shiki code .scWFE, html code.shiki .scWFE{--shiki-dark:#85E89D;--shiki-default:#85E89D;--shiki-light:#22863A}html pre.shiki code .s1uPE, html code.shiki .s1uPE{--shiki-dark:#FFAB70;--shiki-default:#FFAB70;--shiki-light:#E36209}html pre.shiki code .sAPL1, html code.shiki .sAPL1{--shiki-dark:#79B8FF;--shiki-default:#79B8FF;--shiki-light:#005CC5}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}",{"title":20,"searchDepth":35,"depth":35,"links":1003},[1004,1008],{"id":905,"depth":35,"text":906,"children":1005},[1006,1007],{"id":910,"depth":42,"text":911},{"id":952,"depth":42,"text":953},{"id":988,"depth":35,"text":989},null,"Selami dunia penjelajahan grafik secara mendalam.",{"script":1012},[1013],{"type":1014,"key":1015,"data-nuxt-schema-org":38,"nodes":1016},"application/ld+json","schema-org-graph",[1017],{"_resolver":1018},"webPage","/articles/3.jpeg",{},{"props":1022},{},"/en/articles/deapth-first-search-bfs",{"_resolver":1018},{"title":5,"description":1010},{"loc":1023,"videos":1027,"images":1028,"lastmod":1029},[],[],"2025-06-13T00:00:00.000Z","en/articles/deapth-first-search-bfs",[],"DwuLit3XLelem1duyT_1QeZBvekAJYRLZN3A9Tk7Ikw",1750353685545]